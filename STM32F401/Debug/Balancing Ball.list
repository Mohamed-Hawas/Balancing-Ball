
Balancing Ball.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002928  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ac0  08002ac0  00012ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae0  08002ae0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae0  08002ae0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae0  08002ae0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae0  08002ae0  00012ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08002ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000048  08002b30  00020048  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08002b30  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007705  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d9  00000000  00000000  0002777d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000450  00000000  00000000  00028c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000388  00000000  00000000  000290a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002836  00000000  00000000  00029430  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003fe9  00000000  00000000  0002bc66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009a53  00000000  00000000  0002fc4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000396a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010d8  00000000  00000000  00039720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000048 	.word	0x20000048
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002aa8 	.word	0x08002aa8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000004c 	.word	0x2000004c
 80001d4:	08002aa8 	.word	0x08002aa8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <low_pass_filter>:

#include "../MCAL/MTIMER/MTIMER_Int.h"
f64 distance, prevDistance, servoAngle, prevServoAngle, error, prevError, dError, prev_dError, P, I, D, Kp, Ki, Kd, dt ;
u8 	callBalance = 0 ;

f64 low_pass_filter(f64 input, f64 prev_output, f64 alpha) {
 8000bb4:	b5b0      	push	{r4, r5, r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	ed87 0b04 	vstr	d0, [r7, #16]
 8000bbe:	ed87 1b02 	vstr	d1, [r7, #8]
 8000bc2:	ed87 2b00 	vstr	d2, [r7]
	// y[n]=α⋅x[n]+(1−α)⋅y[n−1]
	float outPut =  alpha * input + (1 - alpha) * prev_output;
 8000bc6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000bca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000bce:	f7ff fcbf 	bl	8000550 <__aeabi_dmul>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	4625      	mov	r5, r4
 8000bd8:	461c      	mov	r4, r3
 8000bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000bde:	f04f 0000 	mov.w	r0, #0
 8000be2:	4913      	ldr	r1, [pc, #76]	; (8000c30 <low_pass_filter+0x7c>)
 8000be4:	f7ff fafc 	bl	80001e0 <__aeabi_dsub>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	4610      	mov	r0, r2
 8000bee:	4619      	mov	r1, r3
 8000bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000bf4:	f7ff fcac 	bl	8000550 <__aeabi_dmul>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	4629      	mov	r1, r5
 8000c00:	f7ff faf0 	bl	80001e4 <__adddf3>
 8000c04:	4603      	mov	r3, r0
 8000c06:	460c      	mov	r4, r1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	4621      	mov	r1, r4
 8000c0c:	f7ff ff82 	bl	8000b14 <__aeabi_d2f>
 8000c10:	4603      	mov	r3, r0
 8000c12:	61fb      	str	r3, [r7, #28]
	return outPut ;
 8000c14:	69f8      	ldr	r0, [r7, #28]
 8000c16:	f7ff fc43 	bl	80004a0 <__aeabi_f2d>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460c      	mov	r4, r1
 8000c1e:	ec44 3b17 	vmov	d7, r3, r4
}
 8000c22:	eeb0 0a47 	vmov.f32	s0, s14
 8000c26:	eef0 0a67 	vmov.f32	s1, s15
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c30:	3ff00000 	.word	0x3ff00000
 8000c34:	00000000 	.word	0x00000000

08000c38 <balance>:

void balance (void){
 8000c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

	HULTRA_vSendTrigger(PORTB, PIN12);
 8000c3c:	210c      	movs	r1, #12
 8000c3e:	2001      	movs	r0, #1
 8000c40:	f000 fa58 	bl	80010f4 <HULTRA_vSendTrigger>
	HULTRA_vGetDistance(ULTRA_SONIC1, &distance);
 8000c44:	49a8      	ldr	r1, [pc, #672]	; (8000ee8 <balance+0x2b0>)
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 fa76 	bl	8001138 <HULTRA_vGetDistance>

	// To handle the error of the ultra_sonic
	if ( distance > 32 || distance < 0 ) {
 8000c4c:	4ba6      	ldr	r3, [pc, #664]	; (8000ee8 <balance+0x2b0>)
 8000c4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	4ba5      	ldr	r3, [pc, #660]	; (8000eec <balance+0x2b4>)
 8000c58:	f7ff ff0a 	bl	8000a70 <__aeabi_dcmpgt>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10b      	bne.n	8000c7a <balance+0x42>
 8000c62:	4ba1      	ldr	r3, [pc, #644]	; (8000ee8 <balance+0x2b0>)
 8000c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	f7ff fee0 	bl	8000a34 <__aeabi_dcmplt>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d005      	beq.n	8000c86 <balance+0x4e>
		distance = prevDistance ;
 8000c7a:	4b9d      	ldr	r3, [pc, #628]	; (8000ef0 <balance+0x2b8>)
 8000c7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c80:	4a99      	ldr	r2, [pc, #612]	; (8000ee8 <balance+0x2b0>)
 8000c82:	e9c2 3400 	strd	r3, r4, [r2]
	}

	// Get the error
	error = distance - REFRENCE_POS ;
 8000c86:	4b98      	ldr	r3, [pc, #608]	; (8000ee8 <balance+0x2b0>)
 8000c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	4b98      	ldr	r3, [pc, #608]	; (8000ef4 <balance+0x2bc>)
 8000c92:	f7ff faa5 	bl	80001e0 <__aeabi_dsub>
 8000c96:	4603      	mov	r3, r0
 8000c98:	460c      	mov	r4, r1
 8000c9a:	4a97      	ldr	r2, [pc, #604]	; (8000ef8 <balance+0x2c0>)
 8000c9c:	e9c2 3400 	strd	r3, r4, [r2]
	dError = error - prevError ;
 8000ca0:	4b95      	ldr	r3, [pc, #596]	; (8000ef8 <balance+0x2c0>)
 8000ca2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ca6:	4b95      	ldr	r3, [pc, #596]	; (8000efc <balance+0x2c4>)
 8000ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	f7ff fa96 	bl	80001e0 <__aeabi_dsub>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	460c      	mov	r4, r1
 8000cb8:	4a91      	ldr	r2, [pc, #580]	; (8000f00 <balance+0x2c8>)
 8000cba:	e9c2 3400 	strd	r3, r4, [r2]

	P = error ;
 8000cbe:	4b8e      	ldr	r3, [pc, #568]	; (8000ef8 <balance+0x2c0>)
 8000cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cc4:	4a8f      	ldr	r2, [pc, #572]	; (8000f04 <balance+0x2cc>)
 8000cc6:	e9c2 3400 	strd	r3, r4, [r2]
	I += error * dt ;
 8000cca:	4b8b      	ldr	r3, [pc, #556]	; (8000ef8 <balance+0x2c0>)
 8000ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd0:	4b8d      	ldr	r3, [pc, #564]	; (8000f08 <balance+0x2d0>)
 8000cd2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4623      	mov	r3, r4
 8000cda:	f7ff fc39 	bl	8000550 <__aeabi_dmul>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	460c      	mov	r4, r1
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	4621      	mov	r1, r4
 8000ce6:	4b89      	ldr	r3, [pc, #548]	; (8000f0c <balance+0x2d4>)
 8000ce8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4623      	mov	r3, r4
 8000cf0:	f7ff fa78 	bl	80001e4 <__adddf3>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	460c      	mov	r4, r1
 8000cf8:	4a84      	ldr	r2, [pc, #528]	; (8000f0c <balance+0x2d4>)
 8000cfa:	e9c2 3400 	strd	r3, r4, [r2]
	dError = low_pass_filter(dError, prev_dError, 0.2) ;
 8000cfe:	4b80      	ldr	r3, [pc, #512]	; (8000f00 <balance+0x2c8>)
 8000d00:	ed93 7b00 	vldr	d7, [r3]
 8000d04:	4b82      	ldr	r3, [pc, #520]	; (8000f10 <balance+0x2d8>)
 8000d06:	ed93 6b00 	vldr	d6, [r3]
 8000d0a:	ed9f 2b73 	vldr	d2, [pc, #460]	; 8000ed8 <balance+0x2a0>
 8000d0e:	eeb0 1a46 	vmov.f32	s2, s12
 8000d12:	eef0 1a66 	vmov.f32	s3, s13
 8000d16:	eeb0 0a47 	vmov.f32	s0, s14
 8000d1a:	eef0 0a67 	vmov.f32	s1, s15
 8000d1e:	f7ff ff49 	bl	8000bb4 <low_pass_filter>
 8000d22:	eeb0 7a40 	vmov.f32	s14, s0
 8000d26:	eef0 7a60 	vmov.f32	s15, s1
 8000d2a:	4b75      	ldr	r3, [pc, #468]	; (8000f00 <balance+0x2c8>)
 8000d2c:	ed83 7b00 	vstr	d7, [r3]
	D = (dError) / dt ;
 8000d30:	4b73      	ldr	r3, [pc, #460]	; (8000f00 <balance+0x2c8>)
 8000d32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d36:	4b74      	ldr	r3, [pc, #464]	; (8000f08 <balance+0x2d0>)
 8000d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4623      	mov	r3, r4
 8000d40:	f7ff fd30 	bl	80007a4 <__aeabi_ddiv>
 8000d44:	4603      	mov	r3, r0
 8000d46:	460c      	mov	r4, r1
 8000d48:	4a72      	ldr	r2, [pc, #456]	; (8000f14 <balance+0x2dc>)
 8000d4a:	e9c2 3400 	strd	r3, r4, [r2]

	servoAngle = Kp * P + Ki * I + Kd * D;
 8000d4e:	4b72      	ldr	r3, [pc, #456]	; (8000f18 <balance+0x2e0>)
 8000d50:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d54:	4b6b      	ldr	r3, [pc, #428]	; (8000f04 <balance+0x2cc>)
 8000d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	4623      	mov	r3, r4
 8000d5e:	f7ff fbf7 	bl	8000550 <__aeabi_dmul>
 8000d62:	4603      	mov	r3, r0
 8000d64:	460c      	mov	r4, r1
 8000d66:	461d      	mov	r5, r3
 8000d68:	4626      	mov	r6, r4
 8000d6a:	4b6c      	ldr	r3, [pc, #432]	; (8000f1c <balance+0x2e4>)
 8000d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d70:	4b66      	ldr	r3, [pc, #408]	; (8000f0c <balance+0x2d4>)
 8000d72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d76:	461a      	mov	r2, r3
 8000d78:	4623      	mov	r3, r4
 8000d7a:	f7ff fbe9 	bl	8000550 <__aeabi_dmul>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	460c      	mov	r4, r1
 8000d82:	461a      	mov	r2, r3
 8000d84:	4623      	mov	r3, r4
 8000d86:	4628      	mov	r0, r5
 8000d88:	4631      	mov	r1, r6
 8000d8a:	f7ff fa2b 	bl	80001e4 <__adddf3>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	460c      	mov	r4, r1
 8000d92:	461d      	mov	r5, r3
 8000d94:	4626      	mov	r6, r4
 8000d96:	4b62      	ldr	r3, [pc, #392]	; (8000f20 <balance+0x2e8>)
 8000d98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d9c:	4b5d      	ldr	r3, [pc, #372]	; (8000f14 <balance+0x2dc>)
 8000d9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000da2:	461a      	mov	r2, r3
 8000da4:	4623      	mov	r3, r4
 8000da6:	f7ff fbd3 	bl	8000550 <__aeabi_dmul>
 8000daa:	4603      	mov	r3, r0
 8000dac:	460c      	mov	r4, r1
 8000dae:	461a      	mov	r2, r3
 8000db0:	4623      	mov	r3, r4
 8000db2:	4628      	mov	r0, r5
 8000db4:	4631      	mov	r1, r6
 8000db6:	f7ff fa15 	bl	80001e4 <__adddf3>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	460c      	mov	r4, r1
 8000dbe:	4a59      	ldr	r2, [pc, #356]	; (8000f24 <balance+0x2ec>)
 8000dc0:	e9c2 3400 	strd	r3, r4, [r2]
	servoAngle = low_pass_filter(servoAngle, prevServoAngle, 0.3);
 8000dc4:	4b57      	ldr	r3, [pc, #348]	; (8000f24 <balance+0x2ec>)
 8000dc6:	ed93 7b00 	vldr	d7, [r3]
 8000dca:	4b57      	ldr	r3, [pc, #348]	; (8000f28 <balance+0x2f0>)
 8000dcc:	ed93 6b00 	vldr	d6, [r3]
 8000dd0:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8000ee0 <balance+0x2a8>
 8000dd4:	eeb0 1a46 	vmov.f32	s2, s12
 8000dd8:	eef0 1a66 	vmov.f32	s3, s13
 8000ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8000de0:	eef0 0a67 	vmov.f32	s1, s15
 8000de4:	f7ff fee6 	bl	8000bb4 <low_pass_filter>
 8000de8:	eeb0 7a40 	vmov.f32	s14, s0
 8000dec:	eef0 7a60 	vmov.f32	s15, s1
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <balance+0x2ec>)
 8000df2:	ed83 7b00 	vstr	d7, [r3]

	HSERVO_vServoDeg(SERVO1 , servoAngle);
 8000df6:	4b4b      	ldr	r3, [pc, #300]	; (8000f24 <balance+0x2ec>)
 8000df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	4621      	mov	r1, r4
 8000e00:	f7ff fe40 	bl	8000a84 <__aeabi_d2iz>
 8000e04:	4603      	mov	r3, r0
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f910 	bl	8001030 <HSERVO_vServoDeg>

	// Clamping saturation error
	// Check if the output saturated and the error and servo angle is the same sign
	if (((u8)prevServoAngle == (u8)servoAngle) && (servoAngle/distance > 0) && (servoAngle > 60 ||servoAngle<-45) )
 8000e10:	4b45      	ldr	r3, [pc, #276]	; (8000f28 <balance+0x2f0>)
 8000e12:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e16:	4618      	mov	r0, r3
 8000e18:	4621      	mov	r1, r4
 8000e1a:	f7ff fe5b 	bl	8000ad4 <__aeabi_d2uiz>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	b2dd      	uxtb	r5, r3
 8000e22:	4b40      	ldr	r3, [pc, #256]	; (8000f24 <balance+0x2ec>)
 8000e24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f7ff fe52 	bl	8000ad4 <__aeabi_d2uiz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	429d      	cmp	r5, r3
 8000e36:	d133      	bne.n	8000ea0 <balance+0x268>
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <balance+0x2ec>)
 8000e3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <balance+0x2b0>)
 8000e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4623      	mov	r3, r4
 8000e48:	f7ff fcac 	bl	80007a4 <__aeabi_ddiv>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4618      	mov	r0, r3
 8000e52:	4621      	mov	r1, r4
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	f04f 0300 	mov.w	r3, #0
 8000e5c:	f7ff fe08 	bl	8000a70 <__aeabi_dcmpgt>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d01c      	beq.n	8000ea0 <balance+0x268>
 8000e66:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <balance+0x2ec>)
 8000e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e6c:	f04f 0200 	mov.w	r2, #0
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <balance+0x2f4>)
 8000e72:	f7ff fdfd 	bl	8000a70 <__aeabi_dcmpgt>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d10a      	bne.n	8000e92 <balance+0x25a>
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <balance+0x2ec>)
 8000e7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b2a      	ldr	r3, [pc, #168]	; (8000f30 <balance+0x2f8>)
 8000e88:	f7ff fdd4 	bl	8000a34 <__aeabi_dcmplt>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d006      	beq.n	8000ea0 <balance+0x268>
		I = 0 ;  // Disable the integrator
 8000e92:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <balance+0x2d4>)
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	f04f 0400 	mov.w	r4, #0
 8000e9c:	e9c2 3400 	strd	r3, r4, [r2]

	prevError = error ;
 8000ea0:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <balance+0x2c0>)
 8000ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <balance+0x2c4>)
 8000ea8:	e9c2 3400 	strd	r3, r4, [r2]
	prev_dError = dError ;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <balance+0x2c8>)
 8000eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <balance+0x2d8>)
 8000eb4:	e9c2 3400 	strd	r3, r4, [r2]
	prevDistance = distance ;
 8000eb8:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <balance+0x2b0>)
 8000eba:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <balance+0x2b8>)
 8000ec0:	e9c2 3400 	strd	r3, r4, [r2]
	prevServoAngle = servoAngle ;
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <balance+0x2ec>)
 8000ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eca:	4a17      	ldr	r2, [pc, #92]	; (8000f28 <balance+0x2f0>)
 8000ecc:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000ed0:	bf00      	nop
 8000ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	9999999a 	.word	0x9999999a
 8000edc:	3fc99999 	.word	0x3fc99999
 8000ee0:	33333333 	.word	0x33333333
 8000ee4:	3fd33333 	.word	0x3fd33333
 8000ee8:	20000228 	.word	0x20000228
 8000eec:	40400000 	.word	0x40400000
 8000ef0:	20000220 	.word	0x20000220
 8000ef4:	402e0000 	.word	0x402e0000
 8000ef8:	20000258 	.word	0x20000258
 8000efc:	20000238 	.word	0x20000238
 8000f00:	20000230 	.word	0x20000230
 8000f04:	20000278 	.word	0x20000278
 8000f08:	20000270 	.word	0x20000270
 8000f0c:	20000260 	.word	0x20000260
 8000f10:	20000248 	.word	0x20000248
 8000f14:	20000208 	.word	0x20000208
 8000f18:	20000268 	.word	0x20000268
 8000f1c:	20000218 	.word	0x20000218
 8000f20:	20000250 	.word	0x20000250
 8000f24:	20000240 	.word	0x20000240
 8000f28:	20000210 	.word	0x20000210
 8000f2c:	404e0000 	.word	0x404e0000
 8000f30:	c0468000 	.word	0xc0468000

08000f34 <set_call_balance_flag>:

void set_call_balance_flag(){
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	callBalance = 1 ;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <set_call_balance_flag+0x14>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000064 	.word	0x20000064

08000f4c <set_pid_parameters>:

void set_pid_parameters (f64 copy_Kp, f64 copy_Ki, f64 copy_Kd, f64 copy_dt_ms ){
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	; 0x24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f56:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f5a:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f5e:	ed87 3b00 	vstr	d3, [r7]
	Kp = copy_Kp ;
 8000f62:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <set_pid_parameters+0x74>)
 8000f64:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000f68:	e9c2 3400 	strd	r3, r4, [r2]
	Ki = copy_Ki ;
 8000f6c:	4a15      	ldr	r2, [pc, #84]	; (8000fc4 <set_pid_parameters+0x78>)
 8000f6e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f72:	e9c2 3400 	strd	r3, r4, [r2]
	Kd = copy_Kd ;
 8000f76:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <set_pid_parameters+0x7c>)
 8000f78:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f7c:	e9c2 3400 	strd	r3, r4, [r2]
	dt = copy_dt_ms/1000 ;
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <set_pid_parameters+0x80>)
 8000f86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f8a:	f7ff fc0b 	bl	80007a4 <__aeabi_ddiv>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	460c      	mov	r4, r1
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <set_pid_parameters+0x84>)
 8000f94:	e9c2 3400 	strd	r3, r4, [r2]

	MTIMER_vClearCNT(TIMER2);
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 ff7b 	bl	8001e94 <MTIMER_vClearCNT>
	MTIMER_CallBack(TIMER2,set_call_balance_flag );
 8000f9e:	490d      	ldr	r1, [pc, #52]	; (8000fd4 <set_pid_parameters+0x88>)
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f001 faef 	bl	8002584 <MTIMER_CallBack>
	MTIMER_vPeriodicMS(TIMER2,copy_dt_ms);
 8000fa6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000faa:	f7ff fd93 	bl	8000ad4 <__aeabi_d2uiz>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f000 ff44 	bl	8001e40 <MTIMER_vPeriodicMS>
}
 8000fb8:	bf00      	nop
 8000fba:	3724      	adds	r7, #36	; 0x24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	20000268 	.word	0x20000268
 8000fc4:	20000218 	.word	0x20000218
 8000fc8:	20000250 	.word	0x20000250
 8000fcc:	408f4000 	.word	0x408f4000
 8000fd0:	20000270 	.word	0x20000270
 8000fd4:	08000f35 	.word	0x08000f35

08000fd8 <Balance_Ball>:


void Balance_Ball(){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	if(callBalance)
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <Balance_Ball+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <Balance_Ball+0x10>
		balance();
 8000fe4:	f7ff fe28 	bl	8000c38 <balance>

	callBalance = 0 ;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	; (8000ff4 <Balance_Ball+0x1c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000064 	.word	0x20000064

08000ff8 <HSERVO_vServoInit>:

// Declare an array to store servo information for multiple servos
LOC_SERVO_NUM SERVO_STRUCT[TOT_SERVO_NUM];


void HSERVO_vServoInit(Enum_SERVO_NUM Copy_u8ServoNum,Enum_TIMER_NUM Copy_u8TimerNum,u8 Copy_u8ChannelNum){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
	// Update the TIMER and CHANNEL configuration in the servo structure
	SERVO_STRUCT[Copy_u8ServoNum].TIMER = Copy_u8TimerNum;
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <HSERVO_vServoInit+0x34>)
 800100e:	79ba      	ldrb	r2, [r7, #6]
 8001010:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
	SERVO_STRUCT[Copy_u8ServoNum].CHANNEL = Copy_u8ChannelNum;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <HSERVO_vServoInit+0x34>)
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	4413      	add	r3, r2
 800101c:	797a      	ldrb	r2, [r7, #5]
 800101e:	705a      	strb	r2, [r3, #1]

}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	20000280 	.word	0x20000280

08001030 <HSERVO_vServoDeg>:
 * @brief Sets the angle of the servo motor specified by Copy_u8ServoNum to the desired degree.
 *
 * @param Copy_u8ServoNum: Enum_SERVO_NUM representing the servo number.
 * @param Copy_s8Deg: Desired angle in degrees (from -45 to 45).
 */
void HSERVO_vServoDeg(Enum_SERVO_NUM Copy_u8ServoNum, s16 Copy_s8Deg) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	460a      	mov	r2, r1
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
	// Ensure the angle is within the valid angle range (-45 to 45)
	if (Copy_s8Deg > 60) {
 8001040:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001044:	2b3c      	cmp	r3, #60	; 0x3c
 8001046:	dd02      	ble.n	800104e <HSERVO_vServoDeg+0x1e>
		Copy_s8Deg = 60 ;
 8001048:	233c      	movs	r3, #60	; 0x3c
 800104a:	80bb      	strh	r3, [r7, #4]
 800104c:	e007      	b.n	800105e <HSERVO_vServoDeg+0x2e>
	}else if (Copy_s8Deg < -45) {
 800104e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001052:	f113 0f2d 	cmn.w	r3, #45	; 0x2d
 8001056:	da02      	bge.n	800105e <HSERVO_vServoDeg+0x2e>
		Copy_s8Deg = -45 ;
 8001058:	f64f 73d3 	movw	r3, #65491	; 0xffd3
 800105c:	80bb      	strh	r3, [r7, #4]
	}
	// Add Zero Position to the angle
	Copy_s8Deg += ZERO_POS;
 800105e:	88bb      	ldrh	r3, [r7, #4]
 8001060:	3346      	adds	r3, #70	; 0x46
 8001062:	b29b      	uxth	r3, r3
 8001064:	80bb      	strh	r3, [r7, #4]

	// Calculate the positive duty cycle corresponding to the desired angle
	u16 Positive_Duty = ((Copy_s8Deg * 2000) / 180) + 500;
 8001066:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800106a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800106e:	fb02 f303 	mul.w	r3, r2, r3
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HSERVO_vServoDeg+0x7c>)
 8001074:	fb82 1203 	smull	r1, r2, r2, r3
 8001078:	441a      	add	r2, r3
 800107a:	11d2      	asrs	r2, r2, #7
 800107c:	17db      	asrs	r3, r3, #31
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	b29b      	uxth	r3, r3
 8001082:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001086:	81fb      	strh	r3, [r7, #14]

	// Set the PWM signal to control the servo motor
	MTIMER_vPWM(SERVO_STRUCT[Copy_u8ServoNum].TIMER, SERVO_STRUCT[Copy_u8ServoNum].CHANNEL,
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a09      	ldr	r2, [pc, #36]	; (80010b0 <HSERVO_vServoDeg+0x80>)
 800108c:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HSERVO_vServoDeg+0x80>)
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	7859      	ldrb	r1, [r3, #1]
 800109a:	89fb      	ldrh	r3, [r7, #14]
 800109c:	f644 6220 	movw	r2, #20000	; 0x4e20
 80010a0:	f000 ff0a 	bl	8001eb8 <MTIMER_vPWM>
				SERVO_FullPeriod , Positive_Duty );

}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	b60b60b7 	.word	0xb60b60b7
 80010b0:	20000280 	.word	0x20000280

080010b4 <HULTRA_vInitialize>:
// Array to store information for multiple Ultrasonic Sensors
LOC_ULTRA_NUM ULTRA_STRUCT[TOT_ULTRA_SONIC_NUM];


void HULTRA_vInitialize(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM, Enum_TIMER_NUM Copy_u8TimerNum, u8 Copy_u8ChannelNum)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	71fb      	strb	r3, [r7, #7]
 80010be:	460b      	mov	r3, r1
 80010c0:	71bb      	strb	r3, [r7, #6]
 80010c2:	4613      	mov	r3, r2
 80010c4:	717b      	strb	r3, [r7, #5]
    // Initialize the Input Capture Unit (ICU) of the specified timer and channel
    MTIMER_vICU(Copy_u8TimerNum, Copy_u8ChannelNum);
 80010c6:	797a      	ldrb	r2, [r7, #5]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f001 f85b 	bl	8002188 <MTIMER_vICU>

    // Store the timer number and channel number in the ultrasonic sensor structure
    ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER = Copy_u8TimerNum;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4906      	ldr	r1, [pc, #24]	; (80010f0 <HULTRA_vInitialize+0x3c>)
 80010d6:	79ba      	ldrb	r2, [r7, #6]
 80010d8:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
    ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS = Copy_u8ChannelNum;
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HULTRA_vInitialize+0x3c>)
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	797a      	ldrb	r2, [r7, #5]
 80010e6:	705a      	strb	r2, [r3, #1]
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000284 	.word	0x20000284

080010f4 <HULTRA_vSendTrigger>:


void HULTRA_vSendTrigger(u8 Copy_u8Port, u8 Copy_u8Pin) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	460a      	mov	r2, r1
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	4613      	mov	r3, r2
 8001102:	71bb      	strb	r3, [r7, #6]
	// Set the ultrasonic sensor trigger pin as OUTPUT
	MGPIO_vSetPinMode(Copy_u8Port, Copy_u8Pin, OUTPUT);
 8001104:	79b9      	ldrb	r1, [r7, #6]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2201      	movs	r2, #1
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fa32 	bl	8001574 <MGPIO_vSetPinMode>

	// Raise the ultrasonic sensor trigger pin to HIGH for a short duration
	MGPIO_vSetPinAtomic(Copy_u8Port, Copy_u8Pin, HIGH);
 8001110:	79b9      	ldrb	r1, [r7, #6]
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	2201      	movs	r2, #1
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fba0 	bl	800185c <MGPIO_vSetPinAtomic>
	MSYSTICK_vDelayMicroSec(Trigger_Pulse_Width);  // Wait for "Trigger_Pulse_Width" microseconds
 800111c:	200f      	movs	r0, #15
 800111e:	f000 fe05 	bl	8001d2c <MSYSTICK_vDelayMicroSec>

	// Bring the ultrasonic sensor trigger pin back to LOW
	MGPIO_vSetPinAtomic(Copy_u8Port, Copy_u8Pin, LOW);
 8001122:	79b9      	ldrb	r1, [r7, #6]
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2200      	movs	r2, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fb97 	bl	800185c <MGPIO_vSetPinAtomic>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HULTRA_vGetDistance>:


void HULTRA_vGetDistance(Enum_ULTRA_SONIC_NUM Copy_u8Ultra_NUM,f64* Copy_f64Distance) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
	// Calculate distance based on timer values and assume speed of sound is 343 meters per second
	*Copy_f64Distance = ( (f64)MTIMER_GET_ICU(ULTRA_STRUCT[Copy_u8Ultra_NUM].TIMER, ULTRA_STRUCT[Copy_u8Ultra_NUM].CHANNELS) ) * 3.43 / 20;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HULTRA_vGetDistance+0x68>)
 8001148:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	4a14      	ldr	r2, [pc, #80]	; (80011a0 <HULTRA_vGetDistance+0x68>)
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	785b      	ldrb	r3, [r3, #1]
 8001156:	4619      	mov	r1, r3
 8001158:	f001 f9fa 	bl	8002550 <MTIMER_GET_ICU>
 800115c:	4603      	mov	r3, r0
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f97c 	bl	800045c <__aeabi_ui2d>
 8001164:	a30c      	add	r3, pc, #48	; (adr r3, 8001198 <HULTRA_vGetDistance+0x60>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff f9f1 	bl	8000550 <__aeabi_dmul>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	4618      	mov	r0, r3
 8001174:	4621      	mov	r1, r4
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HULTRA_vGetDistance+0x6c>)
 800117c:	f7ff fb12 	bl	80007a4 <__aeabi_ddiv>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	e9c2 3400 	strd	r3, r4, [r2]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	f3af 8000 	nop.w
 8001198:	d70a3d71 	.word	0xd70a3d71
 800119c:	400b70a3 	.word	0x400b70a3
 80011a0:	20000284 	.word	0x20000284
 80011a4:	40340000 	.word	0x40340000

080011a8 <MEXTI_vEnableInterrupt>:
		//Clear 4 Bits Before Write
		SYSCFG->EXTICR[Copy_u8EXTI_Num / PIN_PER_REG] &= ~(MASK4 << ( (Copy_u8EXTI_Num % PIN_PER_REG)*BIT_PER_PIN ) );
		SYSCFG->EXTICR[Copy_u8EXTI_Num / PIN_PER_REG] |= (Copy_u8Port << ( (Copy_u8EXTI_Num % PIN_PER_REG)*BIT_PER_PIN ) );
}

void MEXTI_vEnableInterrupt(Enum_MEXTI_No_t Copy_u8EXTI_Num){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR,Copy_u8EXTI_Num);
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <MEXTI_vEnableInterrupt+0x2c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	79fa      	ldrb	r2, [r7, #7]
 80011b8:	2101      	movs	r1, #1
 80011ba:	fa01 f202 	lsl.w	r2, r1, r2
 80011be:	4611      	mov	r1, r2
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <MEXTI_vEnableInterrupt+0x2c>)
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6013      	str	r3, [r2, #0]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <EXTI0_IRQHandler>:
		GLOBAL_EXTIPtr[Copy_u8InterruptNo]=ptr;
	}
}


void EXTI0_IRQHandler(void){
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[0]();
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <EXTI0_IRQHandler+0x1c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4798      	blx	r3
	EXTI->PR |= 1;
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <EXTI0_IRQHandler+0x20>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <EXTI0_IRQHandler+0x20>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6153      	str	r3, [r2, #20]
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000068 	.word	0x20000068
 80011f8:	40013c00 	.word	0x40013c00

080011fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[1]();
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <EXTI1_IRQHandler+0x1c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	4798      	blx	r3
	EXTI->PR |= 1<<1;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <EXTI1_IRQHandler+0x20>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <EXTI1_IRQHandler+0x20>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6153      	str	r3, [r2, #20]
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000068 	.word	0x20000068
 800121c:	40013c00 	.word	0x40013c00

08001220 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[2]();
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <EXTI2_IRQHandler+0x1c>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4798      	blx	r3
	EXTI->PR |= 1<<2;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <EXTI2_IRQHandler+0x20>)
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	4a04      	ldr	r2, [pc, #16]	; (8001240 <EXTI2_IRQHandler+0x20>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	6153      	str	r3, [r2, #20]
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000068 	.word	0x20000068
 8001240:	40013c00 	.word	0x40013c00

08001244 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void){
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[3]();
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <EXTI3_IRQHandler+0x1c>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4798      	blx	r3
	EXTI->PR |= 1<<3;
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <EXTI3_IRQHandler+0x20>)
 8001250:	695b      	ldr	r3, [r3, #20]
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <EXTI3_IRQHandler+0x20>)
 8001254:	f043 0308 	orr.w	r3, r3, #8
 8001258:	6153      	str	r3, [r2, #20]
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000068 	.word	0x20000068
 8001264:	40013c00 	.word	0x40013c00

08001268 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void){
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	GLOBAL_EXTIPtr[4]();
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <EXTI4_IRQHandler+0x1c>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4798      	blx	r3
	EXTI->PR |= 1<<4;
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <EXTI4_IRQHandler+0x20>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <EXTI4_IRQHandler+0x20>)
 8001278:	f043 0310 	orr.w	r3, r3, #16
 800127c:	6153      	str	r3, [r2, #20]
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000068 	.word	0x20000068
 8001288:	40013c00 	.word	0x40013c00

0800128c <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI5)==1)&(GLOBAL_EXTIPtr[EXTI5]!=STD_NULL)){
 8001290:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	095b      	lsrs	r3, r3, #5
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b01      	cmp	r3, #1
 800129c:	bf0c      	ite	eq
 800129e:	2301      	moveq	r3, #1
 80012a0:	2300      	movne	r3, #0
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b49      	ldr	r3, [pc, #292]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	4013      	ands	r3, r2
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d009      	beq.n	80012ce <EXTI9_5_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI5]();
 80012ba:	4b44      	ldr	r3, [pc, #272]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI5;
 80012c0:	4b41      	ldr	r3, [pc, #260]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	4a40      	ldr	r2, [pc, #256]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 80012c6:	f043 0320 	orr.w	r3, r3, #32
 80012ca:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
			GLOBAL_EXTIPtr[EXTI9]();
			EXTI->PR |= 1<<EXTI9;
		}
}
 80012cc:	e07a      	b.n	80013c4 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI6)==1)&(GLOBAL_EXTIPtr[EXTI6]!=STD_NULL)){
 80012ce:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	099b      	lsrs	r3, r3, #6
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	2b01      	cmp	r3, #1
 80012da:	bf0c      	ite	eq
 80012dc:	2301      	moveq	r3, #1
 80012de:	2300      	movne	r3, #0
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b3a      	ldr	r3, [pc, #232]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d009      	beq.n	800130c <EXTI9_5_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI6]();
 80012f8:	4b34      	ldr	r3, [pc, #208]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI6;
 80012fe:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 8001300:	695b      	ldr	r3, [r3, #20]
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 8001304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001308:	6153      	str	r3, [r2, #20]
}
 800130a:	e05b      	b.n	80013c4 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI7)==1)&(GLOBAL_EXTIPtr[EXTI7]!=STD_NULL)){
 800130c:	4b2e      	ldr	r3, [pc, #184]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 800130e:	695b      	ldr	r3, [r3, #20]
 8001310:	09db      	lsrs	r3, r3, #7
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b01      	cmp	r3, #1
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b2a      	ldr	r3, [pc, #168]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf14      	ite	ne
 8001328:	2301      	movne	r3, #1
 800132a:	2300      	moveq	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	4013      	ands	r3, r2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <EXTI9_5_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI7]();
 8001336:	4b25      	ldr	r3, [pc, #148]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI7;
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 800133e:	695b      	ldr	r3, [r3, #20]
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 8001342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001346:	6153      	str	r3, [r2, #20]
}
 8001348:	e03c      	b.n	80013c4 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI8)==1)&(GLOBAL_EXTIPtr[EXTI8]!=STD_NULL)){
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	bf0c      	ite	eq
 8001358:	2301      	moveq	r3, #1
 800135a:	2300      	movne	r3, #0
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	2b00      	cmp	r3, #0
 8001364:	bf14      	ite	ne
 8001366:	2301      	movne	r3, #1
 8001368:	2300      	moveq	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	2b00      	cmp	r3, #0
 8001372:	d009      	beq.n	8001388 <EXTI9_5_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI8]();
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI8;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 8001380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001384:	6153      	str	r3, [r2, #20]
}
 8001386:	e01d      	b.n	80013c4 <EXTI9_5_IRQHandler+0x138>
	else if((GET_BIT(EXTI->PR,EXTI9)==1)&(GLOBAL_EXTIPtr[EXTI9]!=STD_NULL)){
 8001388:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	0a5b      	lsrs	r3, r3, #9
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	2b01      	cmp	r3, #1
 8001394:	bf0c      	ite	eq
 8001396:	2301      	moveq	r3, #1
 8001398:	2300      	movne	r3, #0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 800139e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4013      	ands	r3, r2
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <EXTI9_5_IRQHandler+0x138>
			GLOBAL_EXTIPtr[EXTI9]();
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <EXTI9_5_IRQHandler+0x140>)
 80013b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b6:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI9;
 80013b8:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	4a02      	ldr	r2, [pc, #8]	; (80013c8 <EXTI9_5_IRQHandler+0x13c>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6153      	str	r3, [r2, #20]
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013c00 	.word	0x40013c00
 80013cc:	20000068 	.word	0x20000068

080013d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	if((GET_BIT(EXTI->PR,EXTI10)==1)&(GLOBAL_EXTIPtr[EXTI10]!=STD_NULL)){
 80013d4:	4b5d      	ldr	r3, [pc, #372]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	0a9b      	lsrs	r3, r3, #10
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b01      	cmp	r3, #1
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b59      	ldr	r3, [pc, #356]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf14      	ite	ne
 80013f0:	2301      	movne	r3, #1
 80013f2:	2300      	moveq	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d009      	beq.n	8001412 <EXTI15_10_IRQHandler+0x42>
			GLOBAL_EXTIPtr[EXTI10]();
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 8001400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001402:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI10;
 8001404:	4b51      	ldr	r3, [pc, #324]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4a50      	ldr	r2, [pc, #320]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 800140a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140e:	6153      	str	r3, [r2, #20]
		}
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
		GLOBAL_EXTIPtr[EXTI15]();
		EXTI->PR |= 1<<EXTI15;
	}
}
 8001410:	e099      	b.n	8001546 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI11)==1)&(GLOBAL_EXTIPtr[EXTI11]!=STD_NULL)){
 8001412:	4b4e      	ldr	r3, [pc, #312]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	0adb      	lsrs	r3, r3, #11
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b01      	cmp	r3, #1
 800141e:	bf0c      	ite	eq
 8001420:	2301      	moveq	r3, #1
 8001422:	2300      	movne	r3, #0
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf14      	ite	ne
 800142e:	2301      	movne	r3, #1
 8001430:	2300      	moveq	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	4013      	ands	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d009      	beq.n	8001450 <EXTI15_10_IRQHandler+0x80>
			GLOBAL_EXTIPtr[EXTI11]();
 800143c:	4b44      	ldr	r3, [pc, #272]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 800143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001440:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI11;
 8001442:	4b42      	ldr	r3, [pc, #264]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	4a41      	ldr	r2, [pc, #260]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001448:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800144c:	6153      	str	r3, [r2, #20]
}
 800144e:	e07a      	b.n	8001546 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI12)==1)&(GLOBAL_EXTIPtr[EXTI12]!=STD_NULL)){
 8001450:	4b3e      	ldr	r3, [pc, #248]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	0b1b      	lsrs	r3, r3, #12
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b01      	cmp	r3, #1
 800145c:	bf0c      	ite	eq
 800145e:	2301      	moveq	r3, #1
 8001460:	2300      	movne	r3, #0
 8001462:	b2da      	uxtb	r2, r3
 8001464:	4b3a      	ldr	r3, [pc, #232]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	2b00      	cmp	r3, #0
 800146a:	bf14      	ite	ne
 800146c:	2301      	movne	r3, #1
 800146e:	2300      	moveq	r3, #0
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4013      	ands	r3, r2
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <EXTI15_10_IRQHandler+0xbe>
			GLOBAL_EXTIPtr[EXTI12]();
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI12;
 8001480:	4b32      	ldr	r3, [pc, #200]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	4a31      	ldr	r2, [pc, #196]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800148a:	6153      	str	r3, [r2, #20]
}
 800148c:	e05b      	b.n	8001546 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI13)==1)&(GLOBAL_EXTIPtr[EXTI13]!=STD_NULL)){
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	0b5b      	lsrs	r3, r3, #13
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	4b2b      	ldr	r3, [pc, #172]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 80014a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4013      	ands	r3, r2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d009      	beq.n	80014cc <EXTI15_10_IRQHandler+0xfc>
			GLOBAL_EXTIPtr[EXTI13]();
 80014b8:	4b25      	ldr	r3, [pc, #148]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI13;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 80014c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014c8:	6153      	str	r3, [r2, #20]
}
 80014ca:	e03c      	b.n	8001546 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI14)==1)&(GLOBAL_EXTIPtr[EXTI14]!=STD_NULL)){
 80014cc:	4b1f      	ldr	r3, [pc, #124]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	0b9b      	lsrs	r3, r3, #14
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	bf14      	ite	ne
 80014e8:	2301      	movne	r3, #1
 80014ea:	2300      	moveq	r3, #0
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4013      	ands	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d009      	beq.n	800150a <EXTI15_10_IRQHandler+0x13a>
			GLOBAL_EXTIPtr[EXTI14]();
 80014f6:	4b16      	ldr	r3, [pc, #88]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 80014f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fa:	4798      	blx	r3
			EXTI->PR |= 1<<EXTI14;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	6153      	str	r3, [r2, #20]
}
 8001508:	e01d      	b.n	8001546 <EXTI15_10_IRQHandler+0x176>
	else if((GET_BIT(EXTI->PR,EXTI15)==1)&(GLOBAL_EXTIPtr[EXTI15]!=STD_NULL)){
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 800150c:	695b      	ldr	r3, [r3, #20]
 800150e:	0bdb      	lsrs	r3, r3, #15
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b01      	cmp	r3, #1
 8001516:	bf0c      	ite	eq
 8001518:	2301      	moveq	r3, #1
 800151a:	2300      	movne	r3, #0
 800151c:	b2da      	uxtb	r2, r3
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 8001520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001522:	2b00      	cmp	r3, #0
 8001524:	bf14      	ite	ne
 8001526:	2301      	movne	r3, #1
 8001528:	2300      	moveq	r3, #0
 800152a:	b2db      	uxtb	r3, r3
 800152c:	4013      	ands	r3, r2
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <EXTI15_10_IRQHandler+0x176>
		GLOBAL_EXTIPtr[EXTI15]();
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <EXTI15_10_IRQHandler+0x180>)
 8001536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001538:	4798      	blx	r3
		EXTI->PR |= 1<<EXTI15;
 800153a:	4b04      	ldr	r3, [pc, #16]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	4a03      	ldr	r2, [pc, #12]	; (800154c <EXTI15_10_IRQHandler+0x17c>)
 8001540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001544:	6153      	str	r3, [r2, #20]
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40013c00 	.word	0x40013c00
 8001550:	20000068 	.word	0x20000068

08001554 <MFPU_Enable>:
/*                                                                                                     */
/* Notes:                                                                                              */
/* - This function sets CP10 and CP11 bits in SCB_CPACR to enable full access to the FPU.              */
/* - It ensures that the FPU settings take effect using memory barrier instructions.                   */
/*-----------------------------------------------------------------------------------------------------*/
void MFPU_Enable(void) {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	// Set CP10 and CP11 Full Access
	SCB_CPACR |= (0xF << 20);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <MFPU_Enable+0x1c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <MFPU_Enable+0x1c>)
 800155e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001562:	6013      	str	r3, [r2, #0]

	// Ensure the FPU settings take effect
	//__asm volatile ("dsb");
	//__asm volatile ("isb");
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed88 	.word	0xe000ed88

08001574 <MGPIO_vSetPinMode>:
#include"MGPIO_Config.h"
#include"MGPIO_Private.h"
#include"MGPIO_int.h"


void MGPIO_vSetPinMode( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinMode){
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]

	   switch(Copy_u8PortID){
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d01c      	beq.n	80015c6 <MGPIO_vSetPinMode+0x52>
 800158c:	2b02      	cmp	r3, #2
 800158e:	d032      	beq.n	80015f6 <MGPIO_vSetPinMode+0x82>
 8001590:	2b00      	cmp	r3, #0
 8001592:	d000      	beq.n	8001596 <MGPIO_vSetPinMode+0x22>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
	  		   /* set the desired mode*/
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
	  		   break;
	   }
}
 8001594:	e047      	b.n	8001626 <MGPIO_vSetPinMode+0xb2>
		   GPIOA -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MGPIO_vSetPinMode+0xc0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	79ba      	ldrb	r2, [r7, #6]
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	2103      	movs	r1, #3
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	43d2      	mvns	r2, r2
 80015a6:	4611      	mov	r1, r2
 80015a8:	4a22      	ldr	r2, [pc, #136]	; (8001634 <MGPIO_vSetPinMode+0xc0>)
 80015aa:	400b      	ands	r3, r1
 80015ac:	6013      	str	r3, [r2, #0]
		   GPIOA -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80015ae:	4b21      	ldr	r3, [pc, #132]	; (8001634 <MGPIO_vSetPinMode+0xc0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	7979      	ldrb	r1, [r7, #5]
 80015b4:	79ba      	ldrb	r2, [r7, #6]
 80015b6:	0052      	lsls	r2, r2, #1
 80015b8:	fa01 f202 	lsl.w	r2, r1, r2
 80015bc:	4611      	mov	r1, r2
 80015be:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <MGPIO_vSetPinMode+0xc0>)
 80015c0:	430b      	orrs	r3, r1
 80015c2:	6013      	str	r3, [r2, #0]
		   break;
 80015c4:	e02f      	b.n	8001626 <MGPIO_vSetPinMode+0xb2>
	  		   GPIOB -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MGPIO_vSetPinMode+0xc4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	79ba      	ldrb	r2, [r7, #6]
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	2103      	movs	r1, #3
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	43d2      	mvns	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	4a17      	ldr	r2, [pc, #92]	; (8001638 <MGPIO_vSetPinMode+0xc4>)
 80015da:	400b      	ands	r3, r1
 80015dc:	6013      	str	r3, [r2, #0]
	  		   GPIOB -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MGPIO_vSetPinMode+0xc4>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	7979      	ldrb	r1, [r7, #5]
 80015e4:	79ba      	ldrb	r2, [r7, #6]
 80015e6:	0052      	lsls	r2, r2, #1
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	4611      	mov	r1, r2
 80015ee:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MGPIO_vSetPinMode+0xc4>)
 80015f0:	430b      	orrs	r3, r1
 80015f2:	6013      	str	r3, [r2, #0]
	  		   break;
 80015f4:	e017      	b.n	8001626 <MGPIO_vSetPinMode+0xb2>
	  		   GPIOC -> MODER &= ~(0b11<<(Copy_u8PinNo*2));
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MGPIO_vSetPinMode+0xc8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	79ba      	ldrb	r2, [r7, #6]
 80015fc:	0052      	lsls	r2, r2, #1
 80015fe:	2103      	movs	r1, #3
 8001600:	fa01 f202 	lsl.w	r2, r1, r2
 8001604:	43d2      	mvns	r2, r2
 8001606:	4611      	mov	r1, r2
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <MGPIO_vSetPinMode+0xc8>)
 800160a:	400b      	ands	r3, r1
 800160c:	6013      	str	r3, [r2, #0]
	  		   GPIOC -> MODER |= (Copy_u8PinMode <<(Copy_u8PinNo*2));
 800160e:	4b0b      	ldr	r3, [pc, #44]	; (800163c <MGPIO_vSetPinMode+0xc8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	7979      	ldrb	r1, [r7, #5]
 8001614:	79ba      	ldrb	r2, [r7, #6]
 8001616:	0052      	lsls	r2, r2, #1
 8001618:	fa01 f202 	lsl.w	r2, r1, r2
 800161c:	4611      	mov	r1, r2
 800161e:	4a07      	ldr	r2, [pc, #28]	; (800163c <MGPIO_vSetPinMode+0xc8>)
 8001620:	430b      	orrs	r3, r1
 8001622:	6013      	str	r3, [r2, #0]
	  		   break;
 8001624:	bf00      	nop
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40020000 	.word	0x40020000
 8001638:	40020400 	.word	0x40020400
 800163c:	40020800 	.word	0x40020800

08001640 <MGPIO_vSetPinInPutType>:
		  		   GPIOC -> OSPEEDR |= (Copy_u8PinOutPutSpeed <<(Copy_u8PinNo*2));
		  		   break;
		   }
}

void MGPIO_vSetPinInPutType( u8 Copy_u8PortID, u8 Copy_u8PinNo , u8 Copy_u8PinInputType){
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
 800164a:	460b      	mov	r3, r1
 800164c:	71bb      	strb	r3, [r7, #6]
 800164e:	4613      	mov	r3, r2
 8001650:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d01c      	beq.n	8001692 <MGPIO_vSetPinInPutType+0x52>
 8001658:	2b02      	cmp	r3, #2
 800165a:	d032      	beq.n	80016c2 <MGPIO_vSetPinInPutType+0x82>
 800165c:	2b00      	cmp	r3, #0
 800165e:	d000      	beq.n	8001662 <MGPIO_vSetPinInPutType+0x22>
			  		   GPIOC -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
			  		   /* set the desired pull */
			  		   GPIOC -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
			  		   break;
			   }
}
 8001660:	e047      	b.n	80016f2 <MGPIO_vSetPinInPutType+0xb2>
				   GPIOA -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <MGPIO_vSetPinInPutType+0xc0>)
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	79ba      	ldrb	r2, [r7, #6]
 8001668:	0052      	lsls	r2, r2, #1
 800166a:	2103      	movs	r1, #3
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	43d2      	mvns	r2, r2
 8001672:	4611      	mov	r1, r2
 8001674:	4a22      	ldr	r2, [pc, #136]	; (8001700 <MGPIO_vSetPinInPutType+0xc0>)
 8001676:	400b      	ands	r3, r1
 8001678:	60d3      	str	r3, [r2, #12]
				   GPIOA -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 800167a:	4b21      	ldr	r3, [pc, #132]	; (8001700 <MGPIO_vSetPinInPutType+0xc0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	7979      	ldrb	r1, [r7, #5]
 8001680:	79ba      	ldrb	r2, [r7, #6]
 8001682:	0052      	lsls	r2, r2, #1
 8001684:	fa01 f202 	lsl.w	r2, r1, r2
 8001688:	4611      	mov	r1, r2
 800168a:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <MGPIO_vSetPinInPutType+0xc0>)
 800168c:	430b      	orrs	r3, r1
 800168e:	60d3      	str	r3, [r2, #12]
				   break;
 8001690:	e02f      	b.n	80016f2 <MGPIO_vSetPinInPutType+0xb2>
			  		   GPIOB -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <MGPIO_vSetPinInPutType+0xc4>)
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	79ba      	ldrb	r2, [r7, #6]
 8001698:	0052      	lsls	r2, r2, #1
 800169a:	2103      	movs	r1, #3
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	43d2      	mvns	r2, r2
 80016a2:	4611      	mov	r1, r2
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MGPIO_vSetPinInPutType+0xc4>)
 80016a6:	400b      	ands	r3, r1
 80016a8:	60d3      	str	r3, [r2, #12]
			  		   GPIOB -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <MGPIO_vSetPinInPutType+0xc4>)
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	7979      	ldrb	r1, [r7, #5]
 80016b0:	79ba      	ldrb	r2, [r7, #6]
 80016b2:	0052      	lsls	r2, r2, #1
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	4611      	mov	r1, r2
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MGPIO_vSetPinInPutType+0xc4>)
 80016bc:	430b      	orrs	r3, r1
 80016be:	60d3      	str	r3, [r2, #12]
			  		   break;
 80016c0:	e017      	b.n	80016f2 <MGPIO_vSetPinInPutType+0xb2>
			  		   GPIOC -> PUPDR &= ~(0b11<<(Copy_u8PinNo*2));
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MGPIO_vSetPinInPutType+0xc8>)
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	79ba      	ldrb	r2, [r7, #6]
 80016c8:	0052      	lsls	r2, r2, #1
 80016ca:	2103      	movs	r1, #3
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	43d2      	mvns	r2, r2
 80016d2:	4611      	mov	r1, r2
 80016d4:	4a0c      	ldr	r2, [pc, #48]	; (8001708 <MGPIO_vSetPinInPutType+0xc8>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	60d3      	str	r3, [r2, #12]
			  		   GPIOC -> PUPDR |= (Copy_u8PinInputType <<(Copy_u8PinNo*2));
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MGPIO_vSetPinInPutType+0xc8>)
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	7979      	ldrb	r1, [r7, #5]
 80016e0:	79ba      	ldrb	r2, [r7, #6]
 80016e2:	0052      	lsls	r2, r2, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	4a07      	ldr	r2, [pc, #28]	; (8001708 <MGPIO_vSetPinInPutType+0xc8>)
 80016ec:	430b      	orrs	r3, r1
 80016ee:	60d3      	str	r3, [r2, #12]
			  		   break;
 80016f0:	bf00      	nop
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40020000 	.word	0x40020000
 8001704:	40020400 	.word	0x40020400
 8001708:	40020800 	.word	0x40020800

0800170c <MGPIO_u8GetPinValue>:

u8 MGPIO_u8GetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinNo){
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	460a      	mov	r2, r1
 8001716:	71fb      	strb	r3, [r7, #7]
 8001718:	4613      	mov	r3, r2
 800171a:	71bb      	strb	r3, [r7, #6]

		u8 Local_u8PinVal = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	73fb      	strb	r3, [r7, #15]
		switch(Copy_u8PortID){
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d00d      	beq.n	8001742 <MGPIO_u8GetPinValue+0x36>
 8001726:	2b02      	cmp	r3, #2
 8001728:	d015      	beq.n	8001756 <MGPIO_u8GetPinValue+0x4a>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d11d      	bne.n	800176a <MGPIO_u8GetPinValue+0x5e>
		case PORTA:
			Local_u8PinVal= GET_BIT(GPIOA -> IDR , Copy_u8PinNo);
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MGPIO_u8GetPinValue+0x6c>)
 8001730:	691a      	ldr	r2, [r3, #16]
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
 8001738:	b2db      	uxtb	r3, r3
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
			break;
 8001740:	e013      	b.n	800176a <MGPIO_u8GetPinValue+0x5e>
		case PORTB:
					Local_u8PinVal= GET_BIT(GPIOB -> IDR , Copy_u8PinNo);
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MGPIO_u8GetPinValue+0x70>)
 8001744:	691a      	ldr	r2, [r3, #16]
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	fa22 f303 	lsr.w	r3, r2, r3
 800174c:	b2db      	uxtb	r3, r3
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
					break;
 8001754:	e009      	b.n	800176a <MGPIO_u8GetPinValue+0x5e>
		case PORTC:
					Local_u8PinVal= GET_BIT(GPIOC -> IDR , Copy_u8PinNo);
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <MGPIO_u8GetPinValue+0x74>)
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
					break;
 8001768:	bf00      	nop
		}
		return Local_u8PinVal;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40020800 	.word	0x40020800

08001784 <MGPIO_vSetPinValue>:

void MGPIO_vSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8PinValue){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	460b      	mov	r3, r1
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	4613      	mov	r3, r2
 8001794:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d01e      	beq.n	80017da <MGPIO_vSetPinValue+0x56>
 800179c:	2b02      	cmp	r3, #2
 800179e:	d036      	beq.n	800180e <MGPIO_vSetPinValue+0x8a>
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d000      	beq.n	80017a6 <MGPIO_vSetPinValue+0x22>
				else
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
				break;

		}
}
 80017a4:	e04d      	b.n	8001842 <MGPIO_vSetPinValue+0xbe>
			if(Copy_u8PinValue == HIGH)
 80017a6:	797b      	ldrb	r3, [r7, #5]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d10a      	bne.n	80017c2 <MGPIO_vSetPinValue+0x3e>
				SET_BIT(GPIOA -> ODR , Copy_u8PinNo);
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MGPIO_vSetPinValue+0xcc>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	79ba      	ldrb	r2, [r7, #6]
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	4611      	mov	r1, r2
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <MGPIO_vSetPinValue+0xcc>)
 80017bc:	430b      	orrs	r3, r1
 80017be:	6153      	str	r3, [r2, #20]
			break;
 80017c0:	e03f      	b.n	8001842 <MGPIO_vSetPinValue+0xbe>
				CLR_BIT(GPIOA -> ODR , Copy_u8PinNo);
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MGPIO_vSetPinValue+0xcc>)
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	79ba      	ldrb	r2, [r7, #6]
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	43d2      	mvns	r2, r2
 80017d0:	4611      	mov	r1, r2
 80017d2:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <MGPIO_vSetPinValue+0xcc>)
 80017d4:	400b      	ands	r3, r1
 80017d6:	6153      	str	r3, [r2, #20]
			break;
 80017d8:	e033      	b.n	8001842 <MGPIO_vSetPinValue+0xbe>
				if(Copy_u8PinValue == HIGH)
 80017da:	797b      	ldrb	r3, [r7, #5]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d10a      	bne.n	80017f6 <MGPIO_vSetPinValue+0x72>
					SET_BIT(GPIOB -> ODR , Copy_u8PinNo);
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MGPIO_vSetPinValue+0xd0>)
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	79ba      	ldrb	r2, [r7, #6]
 80017e6:	2101      	movs	r1, #1
 80017e8:	fa01 f202 	lsl.w	r2, r1, r2
 80017ec:	4611      	mov	r1, r2
 80017ee:	4a19      	ldr	r2, [pc, #100]	; (8001854 <MGPIO_vSetPinValue+0xd0>)
 80017f0:	430b      	orrs	r3, r1
 80017f2:	6153      	str	r3, [r2, #20]
				break;
 80017f4:	e025      	b.n	8001842 <MGPIO_vSetPinValue+0xbe>
					CLR_BIT(GPIOB -> ODR , Copy_u8PinNo);
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <MGPIO_vSetPinValue+0xd0>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	79ba      	ldrb	r2, [r7, #6]
 80017fc:	2101      	movs	r1, #1
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	43d2      	mvns	r2, r2
 8001804:	4611      	mov	r1, r2
 8001806:	4a13      	ldr	r2, [pc, #76]	; (8001854 <MGPIO_vSetPinValue+0xd0>)
 8001808:	400b      	ands	r3, r1
 800180a:	6153      	str	r3, [r2, #20]
				break;
 800180c:	e019      	b.n	8001842 <MGPIO_vSetPinValue+0xbe>
				if(Copy_u8PinValue == HIGH)
 800180e:	797b      	ldrb	r3, [r7, #5]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d10a      	bne.n	800182a <MGPIO_vSetPinValue+0xa6>
					SET_BIT(GPIOC -> ODR , Copy_u8PinNo);
 8001814:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MGPIO_vSetPinValue+0xd4>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	79ba      	ldrb	r2, [r7, #6]
 800181a:	2101      	movs	r1, #1
 800181c:	fa01 f202 	lsl.w	r2, r1, r2
 8001820:	4611      	mov	r1, r2
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <MGPIO_vSetPinValue+0xd4>)
 8001824:	430b      	orrs	r3, r1
 8001826:	6153      	str	r3, [r2, #20]
				break;
 8001828:	e00a      	b.n	8001840 <MGPIO_vSetPinValue+0xbc>
					CLR_BIT(GPIOC -> ODR , Copy_u8PinNo);
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MGPIO_vSetPinValue+0xd4>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	79ba      	ldrb	r2, [r7, #6]
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	43d2      	mvns	r2, r2
 8001838:	4611      	mov	r1, r2
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <MGPIO_vSetPinValue+0xd4>)
 800183c:	400b      	ands	r3, r1
 800183e:	6153      	str	r3, [r2, #20]
				break;
 8001840:	bf00      	nop
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40020000 	.word	0x40020000
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800

0800185c <MGPIO_vSetPinAtomic>:
 *
 * the correct atomic funtion should be
 * set_bit_fast REG = 1<< pino --> write
 *
 * **/
void MGPIO_vSetPinAtomic(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8PinValue){
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	71fb      	strb	r3, [r7, #7]
 8001866:	460b      	mov	r3, r1
 8001868:	71bb      	strb	r3, [r7, #6]
 800186a:	4613      	mov	r3, r2
 800186c:	717b      	strb	r3, [r7, #5]

	switch(Copy_u8PortID){
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d01e      	beq.n	80018b2 <MGPIO_vSetPinAtomic+0x56>
 8001874:	2b02      	cmp	r3, #2
 8001876:	d036      	beq.n	80018e6 <MGPIO_vSetPinAtomic+0x8a>
 8001878:	2b00      	cmp	r3, #0
 800187a:	d000      	beq.n	800187e <MGPIO_vSetPinAtomic+0x22>
					else
						SET_BIT(GPIOC -> BSRR , (Copy_u8PinNo+16));
					break;

			}
}
 800187c:	e04d      	b.n	800191a <MGPIO_vSetPinAtomic+0xbe>
				if(Copy_u8PinValue == HIGH)
 800187e:	797b      	ldrb	r3, [r7, #5]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d10a      	bne.n	800189a <MGPIO_vSetPinAtomic+0x3e>
					SET_BIT(GPIOA -> BSRR , Copy_u8PinNo);
 8001884:	4b28      	ldr	r3, [pc, #160]	; (8001928 <MGPIO_vSetPinAtomic+0xcc>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	79ba      	ldrb	r2, [r7, #6]
 800188a:	2101      	movs	r1, #1
 800188c:	fa01 f202 	lsl.w	r2, r1, r2
 8001890:	4611      	mov	r1, r2
 8001892:	4a25      	ldr	r2, [pc, #148]	; (8001928 <MGPIO_vSetPinAtomic+0xcc>)
 8001894:	430b      	orrs	r3, r1
 8001896:	6193      	str	r3, [r2, #24]
				break;
 8001898:	e03f      	b.n	800191a <MGPIO_vSetPinAtomic+0xbe>
					SET_BIT(GPIOA -> BSRR , (Copy_u8PinNo+16));
 800189a:	4b23      	ldr	r3, [pc, #140]	; (8001928 <MGPIO_vSetPinAtomic+0xcc>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	79ba      	ldrb	r2, [r7, #6]
 80018a0:	3210      	adds	r2, #16
 80018a2:	2101      	movs	r1, #1
 80018a4:	fa01 f202 	lsl.w	r2, r1, r2
 80018a8:	4611      	mov	r1, r2
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <MGPIO_vSetPinAtomic+0xcc>)
 80018ac:	430b      	orrs	r3, r1
 80018ae:	6193      	str	r3, [r2, #24]
				break;
 80018b0:	e033      	b.n	800191a <MGPIO_vSetPinAtomic+0xbe>
					if(Copy_u8PinValue == HIGH)
 80018b2:	797b      	ldrb	r3, [r7, #5]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d10a      	bne.n	80018ce <MGPIO_vSetPinAtomic+0x72>
						SET_BIT(GPIOB -> BSRR , Copy_u8PinNo);
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <MGPIO_vSetPinAtomic+0xd0>)
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	79ba      	ldrb	r2, [r7, #6]
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4611      	mov	r1, r2
 80018c6:	4a19      	ldr	r2, [pc, #100]	; (800192c <MGPIO_vSetPinAtomic+0xd0>)
 80018c8:	430b      	orrs	r3, r1
 80018ca:	6193      	str	r3, [r2, #24]
					break;
 80018cc:	e025      	b.n	800191a <MGPIO_vSetPinAtomic+0xbe>
						SET_BIT(GPIOB -> BSRR , (Copy_u8PinNo+16));
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MGPIO_vSetPinAtomic+0xd0>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	79ba      	ldrb	r2, [r7, #6]
 80018d4:	3210      	adds	r2, #16
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	4611      	mov	r1, r2
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <MGPIO_vSetPinAtomic+0xd0>)
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6193      	str	r3, [r2, #24]
					break;
 80018e4:	e019      	b.n	800191a <MGPIO_vSetPinAtomic+0xbe>
					if(Copy_u8PinValue == HIGH)
 80018e6:	797b      	ldrb	r3, [r7, #5]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d10a      	bne.n	8001902 <MGPIO_vSetPinAtomic+0xa6>
						SET_BIT(GPIOC -> BSRR , Copy_u8PinNo);
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <MGPIO_vSetPinAtomic+0xd4>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	79ba      	ldrb	r2, [r7, #6]
 80018f2:	2101      	movs	r1, #1
 80018f4:	fa01 f202 	lsl.w	r2, r1, r2
 80018f8:	4611      	mov	r1, r2
 80018fa:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <MGPIO_vSetPinAtomic+0xd4>)
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6193      	str	r3, [r2, #24]
					break;
 8001900:	e00a      	b.n	8001918 <MGPIO_vSetPinAtomic+0xbc>
						SET_BIT(GPIOC -> BSRR , (Copy_u8PinNo+16));
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <MGPIO_vSetPinAtomic+0xd4>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	79ba      	ldrb	r2, [r7, #6]
 8001908:	3210      	adds	r2, #16
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4611      	mov	r1, r2
 8001912:	4a07      	ldr	r2, [pc, #28]	; (8001930 <MGPIO_vSetPinAtomic+0xd4>)
 8001914:	430b      	orrs	r3, r1
 8001916:	6193      	str	r3, [r2, #24]
					break;
 8001918:	bf00      	nop
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	40020800 	.word	0x40020800

08001934 <MGPIO_vSetAlternativeFunction>:

void MGPIO_vSetAlternativeFunction(u8 Copy_u8PortID, u8 Copy_u8PinNo ,u8 Copy_u8FunctionName){
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	460b      	mov	r3, r1
 8001940:	71bb      	strb	r3, [r7, #6]
 8001942:	4613      	mov	r3, r2
 8001944:	717b      	strb	r3, [r7, #5]


	switch(Copy_u8PortID){
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d03a      	beq.n	80019c2 <MGPIO_vSetAlternativeFunction+0x8e>
 800194c:	2b02      	cmp	r3, #2
 800194e:	d06e      	beq.n	8001a2e <MGPIO_vSetAlternativeFunction+0xfa>
 8001950:	2b00      	cmp	r3, #0
 8001952:	d000      	beq.n	8001956 <MGPIO_vSetAlternativeFunction+0x22>

	}



}
 8001954:	e0a1      	b.n	8001a9a <MGPIO_vSetAlternativeFunction+0x166>
		if(Copy_u8PinNo <=7 ){
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	2b07      	cmp	r3, #7
 800195a:	d817      	bhi.n	800198c <MGPIO_vSetAlternativeFunction+0x58>
			GPIOA -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 800195c:	4b52      	ldr	r3, [pc, #328]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	79ba      	ldrb	r2, [r7, #6]
 8001962:	0092      	lsls	r2, r2, #2
 8001964:	210f      	movs	r1, #15
 8001966:	fa01 f202 	lsl.w	r2, r1, r2
 800196a:	43d2      	mvns	r2, r2
 800196c:	4611      	mov	r1, r2
 800196e:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 8001970:	400b      	ands	r3, r1
 8001972:	6213      	str	r3, [r2, #32]
			GPIOA -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	7979      	ldrb	r1, [r7, #5]
 800197a:	79ba      	ldrb	r2, [r7, #6]
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	fa01 f202 	lsl.w	r2, r1, r2
 8001982:	4611      	mov	r1, r2
 8001984:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 8001986:	430b      	orrs	r3, r1
 8001988:	6213      	str	r3, [r2, #32]
		break;
 800198a:	e086      	b.n	8001a9a <MGPIO_vSetAlternativeFunction+0x166>
			Copy_u8PinNo-=8;
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	3b08      	subs	r3, #8
 8001990:	71bb      	strb	r3, [r7, #6]
			GPIOA -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 8001992:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	79ba      	ldrb	r2, [r7, #6]
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	210f      	movs	r1, #15
 800199c:	fa01 f202 	lsl.w	r2, r1, r2
 80019a0:	43d2      	mvns	r2, r2
 80019a2:	4611      	mov	r1, r2
 80019a4:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 80019a6:	400b      	ands	r3, r1
 80019a8:	6253      	str	r3, [r2, #36]	; 0x24
			GPIOA -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 80019ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ae:	7979      	ldrb	r1, [r7, #5]
 80019b0:	79ba      	ldrb	r2, [r7, #6]
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4611      	mov	r1, r2
 80019ba:	4a3b      	ldr	r2, [pc, #236]	; (8001aa8 <MGPIO_vSetAlternativeFunction+0x174>)
 80019bc:	430b      	orrs	r3, r1
 80019be:	6253      	str	r3, [r2, #36]	; 0x24
		break;
 80019c0:	e06b      	b.n	8001a9a <MGPIO_vSetAlternativeFunction+0x166>
			if(Copy_u8PinNo <=7 ){
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	2b07      	cmp	r3, #7
 80019c6:	d817      	bhi.n	80019f8 <MGPIO_vSetAlternativeFunction+0xc4>
				GPIOB -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 80019c8:	4b38      	ldr	r3, [pc, #224]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	79ba      	ldrb	r2, [r7, #6]
 80019ce:	0092      	lsls	r2, r2, #2
 80019d0:	210f      	movs	r1, #15
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	43d2      	mvns	r2, r2
 80019d8:	4611      	mov	r1, r2
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 80019dc:	400b      	ands	r3, r1
 80019de:	6213      	str	r3, [r2, #32]
				GPIOB -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 80019e0:	4b32      	ldr	r3, [pc, #200]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	7979      	ldrb	r1, [r7, #5]
 80019e6:	79ba      	ldrb	r2, [r7, #6]
 80019e8:	0092      	lsls	r2, r2, #2
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	4611      	mov	r1, r2
 80019f0:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 80019f2:	430b      	orrs	r3, r1
 80019f4:	6213      	str	r3, [r2, #32]
			break;
 80019f6:	e050      	b.n	8001a9a <MGPIO_vSetAlternativeFunction+0x166>
				Copy_u8PinNo-=8;
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	3b08      	subs	r3, #8
 80019fc:	71bb      	strb	r3, [r7, #6]
				GPIOB -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 80019fe:	4b2b      	ldr	r3, [pc, #172]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	79ba      	ldrb	r2, [r7, #6]
 8001a04:	0092      	lsls	r2, r2, #2
 8001a06:	210f      	movs	r1, #15
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	43d2      	mvns	r2, r2
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4a26      	ldr	r2, [pc, #152]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 8001a12:	400b      	ands	r3, r1
 8001a14:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOB -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8001a16:	4b25      	ldr	r3, [pc, #148]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	7979      	ldrb	r1, [r7, #5]
 8001a1c:	79ba      	ldrb	r2, [r7, #6]
 8001a1e:	0092      	lsls	r2, r2, #2
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4611      	mov	r1, r2
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <MGPIO_vSetAlternativeFunction+0x178>)
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001a2c:	e035      	b.n	8001a9a <MGPIO_vSetAlternativeFunction+0x166>
			if(Copy_u8PinNo <=7 ){
 8001a2e:	79bb      	ldrb	r3, [r7, #6]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d817      	bhi.n	8001a64 <MGPIO_vSetAlternativeFunction+0x130>
				GPIOC -> AFRL &= ~(0b1111 << (Copy_u8PinNo*4) );
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	79ba      	ldrb	r2, [r7, #6]
 8001a3a:	0092      	lsls	r2, r2, #2
 8001a3c:	210f      	movs	r1, #15
 8001a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a42:	43d2      	mvns	r2, r2
 8001a44:	4611      	mov	r1, r2
 8001a46:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a48:	400b      	ands	r3, r1
 8001a4a:	6213      	str	r3, [r2, #32]
				GPIOC -> AFRL |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	7979      	ldrb	r1, [r7, #5]
 8001a52:	79ba      	ldrb	r2, [r7, #6]
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4a14      	ldr	r2, [pc, #80]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	6213      	str	r3, [r2, #32]
			break;
 8001a62:	e019      	b.n	8001a98 <MGPIO_vSetAlternativeFunction+0x164>
				Copy_u8PinNo-=8;
 8001a64:	79bb      	ldrb	r3, [r7, #6]
 8001a66:	3b08      	subs	r3, #8
 8001a68:	71bb      	strb	r3, [r7, #6]
				GPIOC -> AFRH &= ~(0b1111 << (Copy_u8PinNo*4) );
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	79ba      	ldrb	r2, [r7, #6]
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	210f      	movs	r1, #15
 8001a74:	fa01 f202 	lsl.w	r2, r1, r2
 8001a78:	43d2      	mvns	r2, r2
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a7e:	400b      	ands	r3, r1
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24
				GPIOC -> AFRH |= (Copy_u8FunctionName <<(Copy_u8PinNo*4));
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	7979      	ldrb	r1, [r7, #5]
 8001a88:	79ba      	ldrb	r2, [r7, #6]
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	4611      	mov	r1, r2
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <MGPIO_vSetAlternativeFunction+0x17c>)
 8001a94:	430b      	orrs	r3, r1
 8001a96:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8001a98:	bf00      	nop
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <MNVIC_vEnableInterrupt>:
static MNVIC_Priority_GP Global_u8GPMode  ;

/***************************************************************************/
/*                        Functions Implementations                        */
/***************************************************************************/
void MNVIC_vEnableInterrupt(Enum_MNVIC_NUM_t Copy_u8InterruptNo){
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]

	/* note : writing 0 to any bit has no effect so we can u atomic instruction like BSSR */
	SET_BIT_FAST( NVIC->ISER[ (Copy_u8InterruptNo/32) ] , (Copy_u8InterruptNo % 32)  );
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	f003 031f 	and.w	r3, r3, #31
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	fa02 f103 	lsl.w	r1, r2, r3
 8001aca:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <MNVIC_vEnableInterrupt+0x30>)
 8001acc:	79fb      	ldrb	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <MNVIC_vInitGrouping>:
	 Local_u8Flag = GET_BIT( NVIC->IABR[ (Copy_u8InterruptNo/32) ] , (Copy_u8InterruptNo % 32)  );
	 return Local_u8Flag;

}

void MNVIC_vInitGrouping(MNVIC_Priority_GP Copy_u8Grouping){
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]

	SCB_AIRCR = (VECTKEY) | (Copy_u8Grouping<<8) ;
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <MNVIC_vInitGrouping+0x2c>)
 8001b00:	6013      	str	r3, [r2, #0]
	Global_u8GPMode= Copy_u8Grouping;
 8001b02:	4a05      	ldr	r2, [pc, #20]	; (8001b18 <MNVIC_vInitGrouping+0x30>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	7013      	strb	r3, [r2, #0]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed0c 	.word	0xe000ed0c
 8001b18:	200000a8 	.word	0x200000a8

08001b1c <MRCC_vInit>:
#include"MRCC_Int.h"

/***************************************************************************/
/*                        Functions Implementations                        */
/***************************************************************************/
void MRCC_vInit(void){
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	  CLR_SET(RCC->CFGR,SW0);
	  //Wait until HSE is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSE );
#elif RCC_SYS_CLK == RCC_HSI
	  //Enable Selected Clock
	  SET_BIT(RCC->CR,HSION);
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MRCC_vInit+0x48>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <MRCC_vInit+0x48>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]
	  // Wait Until HSI is ready "Clock is working properly"
	  while( !GET_BIT(RCC->CR,HSIRDY) );
 8001b2c:	bf00      	nop
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <MRCC_vInit+0x48>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f8      	beq.n	8001b2e <MRCC_vInit+0x12>
	  //Select System Clock
	  CLR_2BITS(RCC->CFGR,SW0);
 8001b3c:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MRCC_vInit+0x48>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <MRCC_vInit+0x48>)
 8001b42:	f023 0303 	bic.w	r3, r3, #3
 8001b46:	6093      	str	r3, [r2, #8]
	  //Wait until HSI is used as system clock source
	  while( GET_2BITS(RCC->CFGR,SWS0) != SWS_HSI );
 8001b48:	bf00      	nop
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MRCC_vInit+0x48>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f8      	bne.n	8001b4a <MRCC_vInit+0x2e>
		  SET_BIT(RCC->CR,PLLON);
		  // Wait Until PLL is ready "Clock is working properly"
		  while( !GET_BIT(RCC->CR,PLLRDY) );
#endif

}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <MRCC_vEnableClock>:

void MRCC_vEnableClock(PeripheralEnable_t Copy_u8PeripheralNo){
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71fb      	strb	r3, [r7, #7]
	if(Copy_u8PeripheralNo >= 96){
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	2b5f      	cmp	r3, #95	; 0x5f
 8001b76:	d90d      	bls.n	8001b94 <MRCC_vEnableClock+0x2c>
		Copy_u8PeripheralNo -= 96;
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	3b60      	subs	r3, #96	; 0x60
 8001b7c:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB2ENR,Copy_u8PeripheralNo);
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	2101      	movs	r1, #1
 8001b86:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8a:	4611      	mov	r1, r2
 8001b8c:	4a1a      	ldr	r2, [pc, #104]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001b8e:	430b      	orrs	r3, r1
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
		Copy_u8PeripheralNo -= 32;
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
	}
	else{
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
}
 8001b92:	e02b      	b.n	8001bec <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 64){
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	2b3f      	cmp	r3, #63	; 0x3f
 8001b98:	d90d      	bls.n	8001bb6 <MRCC_vEnableClock+0x4e>
		Copy_u8PeripheralNo -= 64;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	3b40      	subs	r3, #64	; 0x40
 8001b9e:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->APB1ENR,Copy_u8PeripheralNo);
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba4:	79fa      	ldrb	r2, [r7, #7]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bac:	4611      	mov	r1, r2
 8001bae:	4a12      	ldr	r2, [pc, #72]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001bb4:	e01a      	b.n	8001bec <MRCC_vEnableClock+0x84>
	else if(Copy_u8PeripheralNo >= 32){
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	2b1f      	cmp	r3, #31
 8001bba:	d90d      	bls.n	8001bd8 <MRCC_vEnableClock+0x70>
		Copy_u8PeripheralNo -= 32;
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	3b20      	subs	r3, #32
 8001bc0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(RCC->AHB2ENR,Copy_u8PeripheralNo);
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc6:	79fa      	ldrb	r2, [r7, #7]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4a09      	ldr	r2, [pc, #36]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001bd2:	430b      	orrs	r3, r1
 8001bd4:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001bd6:	e009      	b.n	8001bec <MRCC_vEnableClock+0x84>
		SET_BIT(RCC->AHB1ENR,Copy_u8PeripheralNo);}
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	79fa      	ldrb	r2, [r7, #7]
 8001bde:	2101      	movs	r1, #1
 8001be0:	fa01 f202 	lsl.w	r2, r1, r2
 8001be4:	4611      	mov	r1, r2
 8001be6:	4a04      	ldr	r2, [pc, #16]	; (8001bf8 <MRCC_vEnableClock+0x90>)
 8001be8:	430b      	orrs	r3, r1
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40023800 	.word	0x40023800

08001bfc <SPI1_IRQHandler>:
		u8 Local_u8ReceivedData = SPIx->DR;
		return Local_u8ReceivedData;

}

void SPI1_IRQHandler(){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[0]!=STD_NULL)
 8001c00:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <SPI1_IRQHandler+0x40>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <SPI1_IRQHandler+0x20>
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <SPI1_IRQHandler+0x44>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <SPI1_IRQHandler+0x20>
		SPIx_pvTxcallback[0]();
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <SPI1_IRQHandler+0x44>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4798      	blx	r3


	if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[0]!=STD_NULL)
 8001c1c:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <SPI1_IRQHandler+0x40>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <SPI1_IRQHandler+0x3a>
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SPI1_IRQHandler+0x48>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <SPI1_IRQHandler+0x3a>
		SPIx_pvRXcallback[0]();
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <SPI1_IRQHandler+0x48>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4798      	blx	r3
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40013000 	.word	0x40013000
 8001c40:	200000ac 	.word	0x200000ac
 8001c44:	200000bc 	.word	0x200000bc

08001c48 <SPI2_IRQHandler>:

void SPI2_IRQHandler(){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[1]!=STD_NULL)
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <SPI2_IRQHandler+0x40>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <SPI2_IRQHandler+0x20>
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <SPI2_IRQHandler+0x44>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <SPI2_IRQHandler+0x20>
			SPIx_pvTxcallback[1]();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <SPI2_IRQHandler+0x44>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[1]!=STD_NULL)
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <SPI2_IRQHandler+0x40>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d006      	beq.n	8001c82 <SPI2_IRQHandler+0x3a>
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <SPI2_IRQHandler+0x48>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <SPI2_IRQHandler+0x3a>
			SPIx_pvRXcallback[1]();
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <SPI2_IRQHandler+0x48>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4798      	blx	r3

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40013000 	.word	0x40013000
 8001c8c:	200000ac 	.word	0x200000ac
 8001c90:	200000bc 	.word	0x200000bc

08001c94 <SPI3_IRQHandler>:

void SPI3_IRQHandler(){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[2]!=STD_NULL)
 8001c98:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <SPI3_IRQHandler+0x40>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d006      	beq.n	8001cb4 <SPI3_IRQHandler+0x20>
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <SPI3_IRQHandler+0x44>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <SPI3_IRQHandler+0x20>
			SPIx_pvTxcallback[2]();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <SPI3_IRQHandler+0x44>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[2]!=STD_NULL)
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <SPI3_IRQHandler+0x40>)
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <SPI3_IRQHandler+0x3a>
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SPI3_IRQHandler+0x48>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d002      	beq.n	8001cce <SPI3_IRQHandler+0x3a>
			SPIx_pvRXcallback[2]();
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SPI3_IRQHandler+0x48>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4798      	blx	r3

}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40013000 	.word	0x40013000
 8001cd8:	200000ac 	.word	0x200000ac
 8001cdc:	200000bc 	.word	0x200000bc

08001ce0 <SPI4_IRQHandler>:

void SPI4_IRQHandler(){
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0

	if( GET_BIT(SPI1->SR,SR_TXE) && SPIx_pvTxcallback[3]!=STD_NULL)
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <SPI4_IRQHandler+0x40>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d006      	beq.n	8001d00 <SPI4_IRQHandler+0x20>
 8001cf2:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <SPI4_IRQHandler+0x44>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <SPI4_IRQHandler+0x20>
			SPIx_pvTxcallback[3]();
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <SPI4_IRQHandler+0x44>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4798      	blx	r3


		if( GET_BIT(SPI1->SR,SR_RXNE) && SPIx_pvRXcallback[3]!=STD_NULL)
 8001d00:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <SPI4_IRQHandler+0x40>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <SPI4_IRQHandler+0x3a>
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <SPI4_IRQHandler+0x48>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <SPI4_IRQHandler+0x3a>
			SPIx_pvRXcallback[3]();
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SPI4_IRQHandler+0x48>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4798      	blx	r3

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40013000 	.word	0x40013000
 8001d24:	200000ac 	.word	0x200000ac
 8001d28:	200000bc 	.word	0x200000bc

08001d2c <MSYSTICK_vDelayMicroSec>:
 *        SysTick timer to reach zero (polling), and finally disables the SysTick timer.
 *        The provided delay is adjusted to prevent exceeding the maximum load value.
 *
 * @return void
 */
void MSYSTICK_vDelayMicroSec(u32 Copy_u32Delay) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
    // Disable SysTick interrupt
    CLR_BIT(STK->CTRL, STK_INT);
 8001d34:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001d3a:	f023 0302 	bic.w	r3, r3, #2
 8001d3e:	6013      	str	r3, [r2, #0]

    // Calculate the reload value in microseconds
    if ((Copy_u32Delay * STK_CLOCK) >= MAX_LOAD_VALUE) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb89 	bl	800045c <__aeabi_ui2d>
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <MSYSTICK_vDelayMicroSec+0xac>)
 8001d50:	f7fe fd28 	bl	80007a4 <__aeabi_ddiv>
 8001d54:	4603      	mov	r3, r0
 8001d56:	460c      	mov	r4, r1
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d60:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MSYSTICK_vDelayMicroSec+0xb0>)
 8001d62:	f7fe fe7b 	bl	8000a5c <__aeabi_dcmpge>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <MSYSTICK_vDelayMicroSec+0x48>
        Copy_u32Delay = MAX_LOAD_VALUE;
 8001d6c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	e011      	b.n	8001d98 <MSYSTICK_vDelayMicroSec+0x6c>
    } else {
        Copy_u32Delay = Copy_u32Delay * STK_CLOCK;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fb6f 	bl	800045c <__aeabi_ui2d>
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <MSYSTICK_vDelayMicroSec+0xac>)
 8001d84:	f7fe fd0e 	bl	80007a4 <__aeabi_ddiv>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	4621      	mov	r1, r4
 8001d90:	f7fe fea0 	bl	8000ad4 <__aeabi_d2uiz>
 8001d94:	4603      	mov	r3, r0
 8001d96:	607b      	str	r3, [r7, #4]
    }

    // Load the reload value
    STK->LOAD = Copy_u32Delay;
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6053      	str	r3, [r2, #4]

    // Clear the current value register
    STK->VAL = CLR;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]

    // Enable the SysTick timer
    SET_BIT(STK->CTRL, STK_EN);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6013      	str	r3, [r2, #0]

    // Wait for the SysTick timer to reach zero (polling)
    while (!GET_BIT(STK->CTRL, COUNT_FLAG));
 8001db0:	bf00      	nop
 8001db2:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	0c1b      	lsrs	r3, r3, #16
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f8      	beq.n	8001db2 <MSYSTICK_vDelayMicroSec+0x86>

    // Disable the SysTick timer
    CLR_BIT(STK->CTRL, STK_EN);
 8001dc0:	4b04      	ldr	r3, [pc, #16]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a03      	ldr	r2, [pc, #12]	; (8001dd4 <MSYSTICK_vDelayMicroSec+0xa8>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	e000e010 	.word	0xe000e010
 8001dd8:	40200000 	.word	0x40200000
 8001ddc:	416fffff 	.word	0x416fffff

08001de0 <SysTick_Handler>:
/**
 * @brief SysTick Timer Interrupt Handler.
 * @note  Calls the callback function if it has been set.
 * @return void
 */
void SysTick_Handler(void) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
    // Check if a callback function is set and call it
    if (GLOBAL_SYSTICK_CallBack != STD_NULL) {
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <SysTick_Handler+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <SysTick_Handler+0x12>
        GLOBAL_SYSTICK_CallBack();
 8001dec:	4b02      	ldr	r3, [pc, #8]	; (8001df8 <SysTick_Handler+0x18>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4798      	blx	r3
    }
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200000cc 	.word	0x200000cc

08001dfc <LOC_GET_TIMER>:
 * @param 		 Copy_u8TimerNum: The TIMER number to retrieve the memory-mapped structure.
 *                          Expected to be a value from {1 to 8, 9 to 11} representing different Timers.
 * @return 		 TIM2_5_MemMap_t*: Pointer to the memory-mapped structure of the specified TIMER.
 * @note 		 using TIM2_5_MemMap_t struct to be used for all timers
 */
static TIM2_5_MemMap_t* LOC_GET_TIMER(u32 Copy_u8TimerNum) {
 8001dfc:	b4b0      	push	{r4, r5, r7}
 8001dfe:	b08d      	sub	sp, #52	; 0x34
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	// Calculate the base address of the specified TIMER using its offset.
	TIM2_5_MemMap_t* TIMx = (TIM2_5_MemMap_t*)((u32)TIM2 + TIMERS_OFFSET[Copy_u8TimerNum - 1]);
 8001e04:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <LOC_GET_TIMER+0x40>)
 8001e06:	f107 040c 	add.w	r4, r7, #12
 8001e0a:	461d      	mov	r5, r3
 8001e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	009b      	lsls	r3, r3, #2
 8001e1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e22:	4413      	add	r3, r2
 8001e24:	f853 3c24 	ldr.w	r3, [r3, #-36]
 8001e28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Return the pointer to the memory-mapped structure of the specified TIMER.
	return TIMx;
 8001e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3734      	adds	r7, #52	; 0x34
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bcb0      	pop	{r4, r5, r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	08002ac0 	.word	0x08002ac0

08001e40 <MTIMER_vPeriodicMS>:
 *          [This values calculated as Tick time is 1ms "Clock = 16MHZ , prescaler = 16000" ]
 *          for same clock with max prescaler value 2^16:
 *          for TIMERS 1,3,4,9,10,11 MAXIMUM Allowable Delay is 268.435 sec.
 *          for TIMERS 2,5 MAXIMUM Allowable Delay is 203.61 DAY!!!!!.
 */
void MTIMER_vPeriodicMS(Enum_TIMER_NUM Copy_u8TimerNum, u32 Copy_u32Delay) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER(Copy_u8TimerNum);
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff ffd4 	bl	8001dfc <LOC_GET_TIMER>
 8001e54:	60f8      	str	r0, [r7, #12]

	// Reset Control Register 1 Value
	TIMx->CR1 = 0;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

	// Set the prescaler value to achieve a 1ms time base
	TIMx->PSC = SYS_CLOCK * 1000;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e62:	629a      	str	r2, [r3, #40]	; 0x28

	// Set the auto-reload value to achieve the desired delay
	TIMx->ARR = Copy_u32Delay - 1;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set the Update Interrupt Enable bit to enable the interrupt
	SET_BIT(TIMx->DIER, UIE);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f043 0201 	orr.w	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	60da      	str	r2, [r3, #12]

	// Set the Counter Enable bit to start the timer
	SET_BIT(TIMx->CR1, CEN);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	601a      	str	r2, [r3, #0]

	// Ensure Starting CNT from 0 as of some problems with TIMER2 and TIMER 5 if "ARR >0x0020000"
	TIMx->CNT = 0xFFFFFFFF;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e8c:	bf00      	nop
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <MTIMER_vClearCNT>:
}
/*******************************************************************************************************/

/*******************************************************************************************************/
// Function to clear the counter (CNT) of the specified timer
void MTIMER_vClearCNT(Enum_TIMER_NUM Copy_u8TimerNum) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER(Copy_u8TimerNum);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ffab 	bl	8001dfc <LOC_GET_TIMER>
 8001ea6:	60f8      	str	r0, [r7, #12]
	// Clear the counter value (CNT) by setting it to 0x00
	TIMx->CNT = 0x00;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <MTIMER_vPWM>:
/*******************************************************************************************************/

/*******************************************************************************************************/
void MTIMER_vPWM(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel,u16 Copy_u16TotalTime_uSec,u16 Copy_u16PositiveDutyCycle_uSec){
 8001eb8:	b590      	push	{r4, r7, lr}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4623      	mov	r3, r4
 8001ec8:	71fb      	strb	r3, [r7, #7]
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71bb      	strb	r3, [r7, #6]
 8001ece:	460b      	mov	r3, r1
 8001ed0:	80bb      	strh	r3, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	807b      	strh	r3, [r7, #2]
	// Configure GPIO pins and alternative functions based on the selected timer and channel
	MGPIO_vSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	3b01      	subs	r3, #1
	MGPIO_vSetPinMode(
 8001ede:	49a5      	ldr	r1, [pc, #660]	; (8002174 <MTIMER_vPWM+0x2bc>)
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	440a      	add	r2, r1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	79bb      	ldrb	r3, [r7, #6]
 8001ef0:	3b01      	subs	r3, #1
	MGPIO_vSetPinMode(
 8001ef2:	49a1      	ldr	r1, [pc, #644]	; (8002178 <MTIMER_vPWM+0x2c0>)
 8001ef4:	0092      	lsls	r2, r2, #2
 8001ef6:	440a      	add	r2, r1
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2202      	movs	r2, #2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7ff fb37 	bl	8001574 <MGPIO_vSetPinMode>
			ALTFUNC
	);
	MGPIO_vSetAlternativeFunction(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 8001f0e:	4999      	ldr	r1, [pc, #612]	; (8002174 <MTIMER_vPWM+0x2bc>)
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	440a      	add	r2, r1
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	79bb      	ldrb	r3, [r7, #6]
 8001f20:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 8001f22:	4995      	ldr	r1, [pc, #596]	; (8002178 <MTIMER_vPWM+0x2c0>)
 8001f24:	0092      	lsls	r2, r2, #2
 8001f26:	440a      	add	r2, r1
 8001f28:	4413      	add	r3, r2
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 8001f32:	4a92      	ldr	r2, [pc, #584]	; (800217c <MTIMER_vPWM+0x2c4>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f7ff fcfb 	bl	8001934 <MGPIO_vSetAlternativeFunction>
	);
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER(Copy_u8TimerNum);
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff5b 	bl	8001dfc <LOC_GET_TIMER>
 8001f46:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR); 	// UP COUNT
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 0210 	bic.w	r2, r3, #16
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0); 	// 00: Edge-aligned mode. The counter counts up
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0220 	bic.w	r2, r3, #32
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1);    // 		or down depending on the direction bit(DIR)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as output  "PWM"
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0+(((Copy_u8Channel-1)%2)*8)) );
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	4a81      	ldr	r2, [pc, #516]	; (8002180 <MTIMER_vPWM+0x2c8>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	085b      	lsrs	r3, r3, #1
 8001f82:	b2d8      	uxtb	r0, r3
 8001f84:	4602      	mov	r2, r0
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3206      	adds	r2, #6
 8001f8a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f8e:	79bb      	ldrb	r3, [r7, #6]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	bfb8      	it	lt
 8001f9a:	425b      	neglt	r3, r3
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	ea02 0103 	and.w	r1, r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1d82      	adds	r2, r0, #6
 8001fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1+(((Copy_u8Channel-1)%2)*8)) );
 8001fb2:	79bb      	ldrb	r3, [r7, #6]
 8001fb4:	4a72      	ldr	r2, [pc, #456]	; (8002180 <MTIMER_vPWM+0x2c8>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	085b      	lsrs	r3, r3, #1
 8001fbc:	b2d8      	uxtb	r0, r3
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3206      	adds	r2, #6
 8001fc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fc8:	79bb      	ldrb	r3, [r7, #6]
 8001fca:	3b01      	subs	r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	bfb8      	it	lt
 8001fd4:	425b      	neglt	r3, r3
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	3301      	adds	r3, #1
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	ea02 0103 	and.w	r1, r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1d82      	adds	r2, r0, #6
 8001fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	/* TIME Calculation of Total Period:
	 * Total_Period = (PSC / (SYS_CLOCK * 10^6)) * ARR
	 */
	TIMx->PSC = SYS_CLOCK*10-1;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	229f      	movs	r2, #159	; 0x9f
 8001ff2:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx->ARR = ( Copy_u16TotalTime_uSec*100 )/1000; // Timer auto-reload to max <<Periodic time>>
 8001ff4:	88bb      	ldrh	r3, [r7, #4]
 8001ff6:	2264      	movs	r2, #100	; 0x64
 8001ff8:	fb02 f303 	mul.w	r3, r2, r3
 8001ffc:	4a61      	ldr	r2, [pc, #388]	; (8002184 <MTIMER_vPWM+0x2cc>)
 8001ffe:	fb82 1203 	smull	r1, r2, r2, r3
 8002002:	1192      	asrs	r2, r2, #6
 8002004:	17db      	asrs	r3, r3, #31
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	461a      	mov	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CCR[Copy_u8Channel-1] = ( Copy_u16PositiveDutyCycle_uSec*100 )/1000; // << DUTY CYCLE >>
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	2264      	movs	r2, #100	; 0x64
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a5b      	ldr	r2, [pc, #364]	; (8002184 <MTIMER_vPWM+0x2cc>)
 8002018:	fb82 1203 	smull	r1, r2, r2, r3
 800201c:	1192      	asrs	r2, r2, #6
 800201e:	17db      	asrs	r3, r3, #31
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	3b01      	subs	r3, #1
 8002026:	4611      	mov	r1, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	330c      	adds	r3, #12
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	6059      	str	r1, [r3, #4]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxPE+(((Copy_u8Channel-1)%2)*8)) );  //1: Preload register on TIMx_CCRx enabled
 8002032:	79bb      	ldrb	r3, [r7, #6]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <MTIMER_vPWM+0x2c8>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	b2d8      	uxtb	r0, r3
 800203e:	4602      	mov	r2, r0
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	3206      	adds	r2, #6
 8002044:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	3b01      	subs	r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	bfb8      	it	lt
 8002054:	425b      	neglt	r3, r3
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	3303      	adds	r3, #3
 800205a:	2101      	movs	r1, #1
 800205c:	fa01 f303 	lsl.w	r3, r1, r3
 8002060:	ea42 0103 	orr.w	r1, r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1d82      	adds	r2, r0, #6
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM0+(((Copy_u8Channel-1)%2)*8)) );// PWM Mode1 (high then low)
 800206c:	79bb      	ldrb	r3, [r7, #6]
 800206e:	4a44      	ldr	r2, [pc, #272]	; (8002180 <MTIMER_vPWM+0x2c8>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	b2d8      	uxtb	r0, r3
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3206      	adds	r2, #6
 800207e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002082:	79bb      	ldrb	r3, [r7, #6]
 8002084:	3b01      	subs	r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	bfb8      	it	lt
 800208e:	425b      	neglt	r3, r3
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	3304      	adds	r3, #4
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	ea02 0103 	and.w	r1, r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1d82      	adds	r2, r0, #6
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM1+(((Copy_u8Channel-1)%2)*8)) );
 80020a8:	79bb      	ldrb	r3, [r7, #6]
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <MTIMER_vPWM+0x2c8>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	085b      	lsrs	r3, r3, #1
 80020b2:	b2d8      	uxtb	r0, r3
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	3206      	adds	r2, #6
 80020ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020be:	79bb      	ldrb	r3, [r7, #6]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	bfb8      	it	lt
 80020ca:	425b      	neglt	r3, r3
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	3305      	adds	r3, #5
 80020d0:	2101      	movs	r1, #1
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	ea42 0103 	orr.w	r1, r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1d82      	adds	r2, r0, #6
 80020de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( OCxM2+(((Copy_u8Channel-1)%2)*8)) );
 80020e2:	79bb      	ldrb	r3, [r7, #6]
 80020e4:	4a26      	ldr	r2, [pc, #152]	; (8002180 <MTIMER_vPWM+0x2c8>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b2d8      	uxtb	r0, r3
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3206      	adds	r2, #6
 80020f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020f8:	79bb      	ldrb	r3, [r7, #6]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	bfb8      	it	lt
 8002104:	425b      	neglt	r3, r3
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	3306      	adds	r3, #6
 800210a:	2101      	movs	r1, #1
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	ea42 0103 	orr.w	r1, r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1d82      	adds	r2, r0, #6
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	CLR_BIT( TIMx->CCER ,( CCxP + (Copy_u8Channel-1)*4) ); //Polarity 0: active high
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	79ba      	ldrb	r2, [r7, #6]
 8002122:	3a01      	subs	r2, #1
 8002124:	0092      	lsls	r2, r2, #2
 8002126:	3201      	adds	r2, #1
 8002128:	2101      	movs	r1, #1
 800212a:	fa01 f202 	lsl.w	r2, r1, r2
 800212e:	43d2      	mvns	r2, r2
 8002130:	401a      	ands	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	621a      	str	r2, [r3, #32]
	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER , ( CCxE+(Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	79ba      	ldrb	r2, [r7, #6]
 800213c:	3a01      	subs	r2, #1
 800213e:	0092      	lsls	r2, r2, #2
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	431a      	orrs	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx->RESERVED2 , 15 );// MOE 1: OC and OCN outputs are enabled
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002150:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	645a      	str	r2, [r3, #68]	; 0x44

	SET_BIT( TIMx->CR1 , CEN );// Enable timer
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]
	TIMx->CNT = 0xFFFFFFFF;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f04f 32ff 	mov.w	r2, #4294967295
 800216a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bd90      	pop	{r4, r7, pc}
 8002174:	20000000 	.word	0x20000000
 8002178:	20000020 	.word	0x20000020
 800217c:	20000040 	.word	0x20000040
 8002180:	aaaaaaab 	.word	0xaaaaaaab
 8002184:	10624dd3 	.word	0x10624dd3

08002188 <MTIMER_vICU>:
/*******************************************************************************************************/


/*******************************************************************************************************/
void MTIMER_vICU(Enum_TIMER_NUM Copy_u8TimerNum,Enum_TIMER_CHs Copy_u8Channel){
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	460a      	mov	r2, r1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	4613      	mov	r3, r2
 8002196:	71bb      	strb	r3, [r7, #6]
	// Configure GPIO pins and alternative functions based on the selected timer and channel
	MGPIO_vSetPinMode(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	1e5a      	subs	r2, r3, #1
 800219c:	79bb      	ldrb	r3, [r7, #6]
 800219e:	3b01      	subs	r3, #1
	MGPIO_vSetPinMode(
 80021a0:	4999      	ldr	r1, [pc, #612]	; (8002408 <MTIMER_vICU+0x280>)
 80021a2:	0092      	lsls	r2, r2, #2
 80021a4:	440a      	add	r2, r1
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	1e5a      	subs	r2, r3, #1
 80021b0:	79bb      	ldrb	r3, [r7, #6]
 80021b2:	3b01      	subs	r3, #1
	MGPIO_vSetPinMode(
 80021b4:	4995      	ldr	r1, [pc, #596]	; (800240c <MTIMER_vICU+0x284>)
 80021b6:	0092      	lsls	r2, r2, #2
 80021b8:	440a      	add	r2, r1
 80021ba:	4413      	add	r3, r2
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2202      	movs	r2, #2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7ff f9d6 	bl	8001574 <MGPIO_vSetPinMode>
			ALTFUNC
	);
	MGPIO_vSetAlternativeFunction(
			TIMER_PORT_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1],
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	1e5a      	subs	r2, r3, #1
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 80021d0:	498d      	ldr	r1, [pc, #564]	; (8002408 <MTIMER_vICU+0x280>)
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	440a      	add	r2, r1
 80021d6:	4413      	add	r3, r2
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b2d8      	uxtb	r0, r3
			TIMER_PIN_MAP[Copy_u8TimerNum-1][Copy_u8Channel-1] ,
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	1e5a      	subs	r2, r3, #1
 80021e0:	79bb      	ldrb	r3, [r7, #6]
 80021e2:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 80021e4:	4989      	ldr	r1, [pc, #548]	; (800240c <MTIMER_vICU+0x284>)
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	440a      	add	r2, r1
 80021ea:	4413      	add	r3, r2
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b2d9      	uxtb	r1, r3
			TIMER_AF[Copy_u8TimerNum-1]
 80021f0:	79fb      	ldrb	r3, [r7, #7]
 80021f2:	3b01      	subs	r3, #1
	MGPIO_vSetAlternativeFunction(
 80021f4:	4a86      	ldr	r2, [pc, #536]	; (8002410 <MTIMER_vICU+0x288>)
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461a      	mov	r2, r3
 80021fc:	f7ff fb9a 	bl	8001934 <MGPIO_vSetAlternativeFunction>
	);
	// Get the base address of the specified timer
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER(Copy_u8TimerNum);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fdfa 	bl	8001dfc <LOC_GET_TIMER>
 8002208:	60f8      	str	r0, [r7, #12]
	SET_BIT( TIMx->CR1 , ARPE );    // Enable auto-reload preload
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , DIR ); 	// UP COUNT
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0210 	bic.w	r2, r3, #16
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS0 ); 	// 00: Edge-aligned mode. The counter counts up
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0220 	bic.w	r2, r3, #32
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	601a      	str	r2, [r3, #0]
	CLR_BIT( TIMx->CR1 , CMS1 );    // 		or down depending on the direction bit(DIR)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]

	//01: CCx channel is configured as ICU
	SET_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS0 + ( ((Copy_u8Channel-1)%2)*8)) );
 800223a:	79bb      	ldrb	r3, [r7, #6]
 800223c:	4a75      	ldr	r2, [pc, #468]	; (8002414 <MTIMER_vICU+0x28c>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	085b      	lsrs	r3, r3, #1
 8002244:	b2d8      	uxtb	r0, r3
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3206      	adds	r2, #6
 800224c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002250:	79bb      	ldrb	r3, [r7, #6]
 8002252:	3b01      	subs	r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	bfb8      	it	lt
 800225c:	425b      	neglt	r3, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	2101      	movs	r1, #1
 8002262:	fa01 f303 	lsl.w	r3, r1, r3
 8002266:	ea42 0103 	orr.w	r1, r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1d82      	adds	r2, r0, #6
 800226e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT( TIMx->CCMR[Copy_u8Channel / 3] , ( CCxS1 + ( ((Copy_u8Channel-1)%2)*8)) );
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	4a67      	ldr	r2, [pc, #412]	; (8002414 <MTIMER_vICU+0x28c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	b2d8      	uxtb	r0, r3
 800227e:	4602      	mov	r2, r0
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3206      	adds	r2, #6
 8002284:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	3b01      	subs	r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	bfb8      	it	lt
 8002294:	425b      	neglt	r3, r3
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	3301      	adds	r3, #1
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	ea02 0103 	and.w	r1, r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1d82      	adds	r2, r0, #6
 80022aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	//FILTERING
	//0010: fSAMPLING=fCK_INT, N=4
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF0 + ( ((Copy_u8Channel-1)%2)*8)));
 80022ae:	79bb      	ldrb	r3, [r7, #6]
 80022b0:	4a58      	ldr	r2, [pc, #352]	; (8002414 <MTIMER_vICU+0x28c>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	b2d8      	uxtb	r0, r3
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3206      	adds	r2, #6
 80022c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022c4:	79bb      	ldrb	r3, [r7, #6]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	bfb8      	it	lt
 80022d0:	425b      	neglt	r3, r3
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	3304      	adds	r3, #4
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	ea02 0103 	and.w	r1, r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1d82      	adds	r2, r0, #6
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	SET_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF1 + ( ((Copy_u8Channel-1)%2)*8)));
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	4a49      	ldr	r2, [pc, #292]	; (8002414 <MTIMER_vICU+0x28c>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	b2d8      	uxtb	r0, r3
 80022f6:	4602      	mov	r2, r0
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3206      	adds	r2, #6
 80022fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002300:	79bb      	ldrb	r3, [r7, #6]
 8002302:	3b01      	subs	r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	bfb8      	it	lt
 800230c:	425b      	neglt	r3, r3
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	3305      	adds	r3, #5
 8002312:	2101      	movs	r1, #1
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	ea42 0103 	orr.w	r1, r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1d82      	adds	r2, r0, #6
 8002320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF2 + ( ((Copy_u8Channel-1)%2)*8)));
 8002324:	79bb      	ldrb	r3, [r7, #6]
 8002326:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <MTIMER_vICU+0x28c>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	b2d8      	uxtb	r0, r3
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	3206      	adds	r2, #6
 8002336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	3b01      	subs	r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	bfb8      	it	lt
 8002346:	425b      	neglt	r3, r3
 8002348:	00db      	lsls	r3, r3, #3
 800234a:	3306      	adds	r3, #6
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	ea02 0103 	and.w	r1, r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1d82      	adds	r2, r0, #6
 800235c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	CLR_BIT(TIMx->CCMR[Copy_u8Channel / 3],( ICxF3 + ( ((Copy_u8Channel-1)%2)*8)));
 8002360:	79bb      	ldrb	r3, [r7, #6]
 8002362:	4a2c      	ldr	r2, [pc, #176]	; (8002414 <MTIMER_vICU+0x28c>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	3206      	adds	r2, #6
 8002372:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002376:	79bb      	ldrb	r3, [r7, #6]
 8002378:	3b01      	subs	r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	bfb8      	it	lt
 8002382:	425b      	neglt	r3, r3
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	3307      	adds	r3, #7
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	ea02 0103 	and.w	r1, r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1d82      	adds	r2, r0, #6
 8002398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	// set prescaler
	TIMx->PSC = SYS_CLOCK * 10;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	22a0      	movs	r2, #160	; 0xa0
 80023a0:	629a      	str	r2, [r3, #40]	; 0x28
	TIMx -> ARR = 0xFFFFFFFF;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	62da      	str	r2, [r3, #44]	; 0x2c

	//SET_BIT(TIMx->EGR,0); //UG: Update generation - 1: Reinitialize counter&update registers
	SET_BIT( TIMx->CCER  , ( CCxE + (Copy_u8Channel-1)*4) ); //Bit 0 CC1E: Capture/Compare 1 output enable
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	79ba      	ldrb	r2, [r7, #6]
 80023b0:	3a01      	subs	r2, #1
 80023b2:	0092      	lsls	r2, r2, #2
 80023b4:	2101      	movs	r1, #1
 80023b6:	fa01 f202 	lsl.w	r2, r1, r2
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	621a      	str	r2, [r3, #32]
	CLR_BIT( TIMx->CCER  , ( CCxP + (Copy_u8Channel-1)*4) );
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	79ba      	ldrb	r2, [r7, #6]
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	3201      	adds	r2, #1
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	43d2      	mvns	r2, r2
 80023d4:	401a      	ands	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	621a      	str	r2, [r3, #32]
	SET_BIT( TIMx-> DIER , Copy_u8Channel );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	79ba      	ldrb	r2, [r7, #6]
 80023e0:	2101      	movs	r1, #1
 80023e2:	fa01 f202 	lsl.w	r2, r1, r2
 80023e6:	431a      	orrs	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	60da      	str	r2, [r3, #12]

	SET_BIT( TIMx->CR1   , CEN );// Enable timer
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	601a      	str	r2, [r3, #0]
	TIMx-> CNT = 0xFFFFFFFF;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24

}
 8002400:	bf00      	nop
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000000 	.word	0x20000000
 800240c:	20000020 	.word	0x20000020
 8002410:	20000040 	.word	0x20000040
 8002414:	aaaaaaab 	.word	0xaaaaaaab

08002418 <LOC_TIMER_ICU>:
 *         timer to capture the rising edge first, then the falling edge.
 * @return None
 */
u32 cv1=0;
u32	cv2=0;
static void LOC_TIMER_ICU(Enum_TIMER_NUM Copy_u8TimerArrIdx,Enum_TIMER_CHs Copy_u8ChannelNum) {
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
	static u8 captureState[29] = {0};        // Array to store capture state for each channel
	static u32 captureValue1[29] = {0};       // Array to store capture value 1 for each channel
	static u32 captureValue2 = 0;       // Array to store capture value 2 for each channel

	// Get pointer to the memory map of the timer based on the input timer number
	TIM2_5_MemMap_t* TIMx = LOC_GET_TIMER( (Copy_u8TimerArrIdx/4) + 1);
 8002428:	79fb      	ldrb	r3, [r7, #7]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	3301      	adds	r3, #1
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fce3 	bl	8001dfc <LOC_GET_TIMER>
 8002436:	60f8      	str	r0, [r7, #12]

	if (captureState[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] == 0 ) {
 8002438:	79fa      	ldrb	r2, [r7, #7]
 800243a:	79bb      	ldrb	r3, [r7, #6]
 800243c:	4413      	add	r3, r2
 800243e:	4a3c      	ldr	r2, [pc, #240]	; (8002530 <LOC_TIMER_ICU+0x118>)
 8002440:	5cd3      	ldrb	r3, [r2, r3]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d125      	bne.n	8002492 <LOC_TIMER_ICU+0x7a>
		// Capture the time on the rising edge
		captureValue1[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] = TIMx->CCR[Copy_u8ChannelNum];
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	79f9      	ldrb	r1, [r7, #7]
 800244a:	79ba      	ldrb	r2, [r7, #6]
 800244c:	440a      	add	r2, r1
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	330c      	adds	r3, #12
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4936      	ldr	r1, [pc, #216]	; (8002534 <LOC_TIMER_ICU+0x11c>)
 800245a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		cv1= captureValue1[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ];
 800245e:	79fa      	ldrb	r2, [r7, #7]
 8002460:	79bb      	ldrb	r3, [r7, #6]
 8002462:	4413      	add	r3, r2
 8002464:	4a33      	ldr	r2, [pc, #204]	; (8002534 <LOC_TIMER_ICU+0x11c>)
 8002466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246a:	4a33      	ldr	r2, [pc, #204]	; (8002538 <LOC_TIMER_ICU+0x120>)
 800246c:	6013      	str	r3, [r2, #0]
		// Enable falling edge capture
		SET_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	79ba      	ldrb	r2, [r7, #6]
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	3201      	adds	r2, #1
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f202 	lsl.w	r2, r1, r2
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	621a      	str	r2, [r3, #32]

		// Move to the next state
		captureState[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] = 1;
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	4413      	add	r3, r2
 800248a:	4a29      	ldr	r2, [pc, #164]	; (8002530 <LOC_TIMER_ICU+0x118>)
 800248c:	2101      	movs	r1, #1
 800248e:	54d1      	strb	r1, [r2, r3]
			timee = Time[13] / 100.0;
		}
		// Reset state value
		captureState[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] = 0;
	}
}
 8002490:	e049      	b.n	8002526 <LOC_TIMER_ICU+0x10e>
		captureValue2 = TIMx->CCR[Copy_u8ChannelNum];
 8002492:	79bb      	ldrb	r3, [r7, #6]
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	330c      	adds	r3, #12
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4413      	add	r3, r2
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4a27      	ldr	r2, [pc, #156]	; (800253c <LOC_TIMER_ICU+0x124>)
 80024a0:	6013      	str	r3, [r2, #0]
		cv2= captureValue2;
 80024a2:	4b26      	ldr	r3, [pc, #152]	; (800253c <LOC_TIMER_ICU+0x124>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a26      	ldr	r2, [pc, #152]	; (8002540 <LOC_TIMER_ICU+0x128>)
 80024a8:	6013      	str	r3, [r2, #0]
		CLR_BIT(TIMx->CCER, (CCxP + Copy_u8ChannelNum*4) );
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	79ba      	ldrb	r2, [r7, #6]
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	3201      	adds	r2, #1
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	43d2      	mvns	r2, r2
 80024bc:	401a      	ands	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	621a      	str	r2, [r3, #32]
		if( captureValue1[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] < captureValue2 ){
 80024c2:	79fa      	ldrb	r2, [r7, #7]
 80024c4:	79bb      	ldrb	r3, [r7, #6]
 80024c6:	4413      	add	r3, r2
 80024c8:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <LOC_TIMER_ICU+0x11c>)
 80024ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024ce:	4b1b      	ldr	r3, [pc, #108]	; (800253c <LOC_TIMER_ICU+0x124>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d221      	bcs.n	800251a <LOC_TIMER_ICU+0x102>
			Time[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] = captureValue2 - captureValue1[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ];
 80024d6:	4b19      	ldr	r3, [pc, #100]	; (800253c <LOC_TIMER_ICU+0x124>)
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	79fa      	ldrb	r2, [r7, #7]
 80024dc:	79bb      	ldrb	r3, [r7, #6]
 80024de:	4413      	add	r3, r2
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <LOC_TIMER_ICU+0x11c>)
 80024e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80024e6:	79f8      	ldrb	r0, [r7, #7]
 80024e8:	79bb      	ldrb	r3, [r7, #6]
 80024ea:	4403      	add	r3, r0
 80024ec:	1a8a      	subs	r2, r1, r2
 80024ee:	4915      	ldr	r1, [pc, #84]	; (8002544 <LOC_TIMER_ICU+0x12c>)
 80024f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			timee = Time[13] / 100.0;
 80024f4:	4b13      	ldr	r3, [pc, #76]	; (8002544 <LOC_TIMER_ICU+0x12c>)
 80024f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd ffaf 	bl	800045c <__aeabi_ui2d>
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <LOC_TIMER_ICU+0x130>)
 8002504:	f7fe f94e 	bl	80007a4 <__aeabi_ddiv>
 8002508:	4603      	mov	r3, r0
 800250a:	460c      	mov	r4, r1
 800250c:	4618      	mov	r0, r3
 800250e:	4621      	mov	r1, r4
 8002510:	f7fe fb00 	bl	8000b14 <__aeabi_d2f>
 8002514:	4602      	mov	r2, r0
 8002516:	4b0d      	ldr	r3, [pc, #52]	; (800254c <LOC_TIMER_ICU+0x134>)
 8002518:	601a      	str	r2, [r3, #0]
		captureState[ ( Copy_u8TimerArrIdx + Copy_u8ChannelNum ) ] = 0;
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	79bb      	ldrb	r3, [r7, #6]
 800251e:	4413      	add	r3, r2
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <LOC_TIMER_ICU+0x118>)
 8002522:	2100      	movs	r1, #0
 8002524:	54d1      	strb	r1, [r2, r3]
}
 8002526:	bf00      	nop
 8002528:	3714      	adds	r7, #20
 800252a:	46bd      	mov	sp, r7
 800252c:	bd90      	pop	{r4, r7, pc}
 800252e:	bf00      	nop
 8002530:	20000170 	.word	0x20000170
 8002534:	20000190 	.word	0x20000190
 8002538:	20000168 	.word	0x20000168
 800253c:	20000204 	.word	0x20000204
 8002540:	2000016c 	.word	0x2000016c
 8002544:	200000f0 	.word	0x200000f0
 8002548:	40590000 	.word	0x40590000
 800254c:	20000164 	.word	0x20000164

08002550 <MTIMER_GET_ICU>:
 * @param   Copy_u8Channel: The channel number.
 *
 * @return  The ICU value for the specified timer and channel.
 *          If the timer is TIMER2 or TIMER5, the result is divided by (SYS_CLOCK * 100).
 */
u32 MTIMER_GET_ICU(Enum_TIMER_NUM Copy_u8TimerNum, Enum_TIMER_CHs Copy_u8Channel) {
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	460a      	mov	r2, r1
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	4613      	mov	r3, r2
 800255e:	71bb      	strb	r3, [r7, #6]
	return Time[(4 * (Copy_u8TimerNum - 1) + (Copy_u8Channel - 1))];
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	3b01      	subs	r3, #1
 8002564:	009a      	lsls	r2, r3, #2
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	3b01      	subs	r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <MTIMER_GET_ICU+0x30>)
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	200000f0 	.word	0x200000f0

08002584 <MTIMER_CallBack>:
 *
 * @return  void.
 *
 * @note    The callback function will be called when the specified timer triggers an interrupt.
 */
void MTIMER_CallBack(Enum_TIMER_NUM Copy_u8TimerNum, void (*ptr)(void)) {
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
	// Set the callback function pointer in the GLOBAL_Ptr array
	GLOBAL_Ptr[Copy_u8TimerNum - 1] = ptr;
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	3b01      	subs	r3, #1
 8002594:	4904      	ldr	r1, [pc, #16]	; (80025a8 <MTIMER_CallBack+0x24>)
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	200000d0 	.word	0x200000d0

080025ac <TIM1_UP_TIM10_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 and TIM10 interrupts.
 *
 * @note    This function is called when either TIM1 or TIM10 triggers an interrupt.
 */
void TIM1_UP_TIM10_IRQHandler(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
	// Check if the update interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 0)) {
 80025b0:	4b1c      	ldr	r3, [pc, #112]	; (8002624 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <TIM1_UP_TIM10_IRQHandler+0x2c>

		// Check if a callback function is registered for TIM1
		if (GLOBAL_Ptr[0] != STD_NULL) {
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <TIM1_UP_TIM10_IRQHandler+0x1e>
			// Call the callback function for TIM1
			GLOBAL_Ptr[0]();
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM1
		CLR_BIT(TIM1->SR, 0);
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	4a15      	ldr	r2, [pc, #84]	; (8002624 <TIM1_UP_TIM10_IRQHandler+0x78>)
 80025d0:	f023 0301 	bic.w	r3, r3, #1
 80025d4:	6113      	str	r3, [r2, #16]
			// Clear the update interrupt flag of TIM10
			CLR_BIT(TIM10->SR, 0);

		}
	}
}
 80025d6:	e023      	b.n	8002620 <TIM1_UP_TIM10_IRQHandler+0x74>
		if (GET_BIT(TIM10->SR, 1)) {
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <TIM1_UP_TIM10_IRQHandler+0x4e>
			LOC_TIMER_ICU( 4 * (TIMER10 - 1) , CH1 - 1);
 80025e6:	2100      	movs	r1, #0
 80025e8:	2018      	movs	r0, #24
 80025ea:	f7ff ff15 	bl	8002418 <LOC_TIMER_ICU>
			CLR_BIT(TIM10->SR, CH1);
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	4a0e      	ldr	r2, [pc, #56]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 80025f4:	f023 0302 	bic.w	r3, r3, #2
 80025f8:	6113      	str	r3, [r2, #16]
		if (GET_BIT(TIM10->SR, 0)) {
 80025fa:	4b0c      	ldr	r3, [pc, #48]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <TIM1_UP_TIM10_IRQHandler+0x74>
			if (GLOBAL_Ptr[6] != STD_NULL) {
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <TIM1_UP_TIM10_IRQHandler+0x68>
				GLOBAL_Ptr[6]();
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <TIM1_UP_TIM10_IRQHandler+0x7c>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	4798      	blx	r3
			CLR_BIT(TIM10->SR, 0);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <TIM1_UP_TIM10_IRQHandler+0x80>)
 800261a:	f023 0301 	bic.w	r3, r3, #1
 800261e:	6113      	str	r3, [r2, #16]
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40010000 	.word	0x40010000
 8002628:	200000d0 	.word	0x200000d0
 800262c:	40014400 	.word	0x40014400

08002630 <TIM1_TRG_COM_TIM11_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 trigger/completion and TIM11 interrupts.
 *
 * @note    This function is called when either TIM1 triggers a trigger/completion or TIM11 triggers an interrupt.
 */
void TIM1_TRG_COM_TIM11_IRQHandler(void) {
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

	// Check if the trigger interrupt or COM interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 5) || GET_BIT(TIM1->SR, 6)) {
 8002634:	4b19      	ldr	r3, [pc, #100]	; (800269c <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>)
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	095b      	lsrs	r3, r3, #5
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d12a      	bne.n	8002698 <TIM1_TRG_COM_TIM11_IRQHandler+0x68>
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <TIM1_TRG_COM_TIM11_IRQHandler+0x6c>)
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b00      	cmp	r3, #0
 800264e:	d123      	bne.n	8002698 <TIM1_TRG_COM_TIM11_IRQHandler+0x68>
		// Handle TIMER1 trigger or COM interrupt
		// Add the necessary code or call a function for TIMER1 trigger or COM handling
	}
	else {
		// Check if the capture/compare interrupt flag for CH1 of TIM11 is set
		if (GET_BIT(TIM11->SR, 1)) {
 8002650:	4b13      	ldr	r3, [pc, #76]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d009      	beq.n	8002672 <TIM1_TRG_COM_TIM11_IRQHandler+0x42>

			// Call the LOC_TIMER_ICU function for handling CH1 interrupt of TIM11
			// Multiplying by 4 is to get index in the array for the timer channel
			LOC_TIMER_ICU( 4* (TIMER11 - 1) , CH1 - 1);
 800265e:	2100      	movs	r1, #0
 8002660:	201c      	movs	r0, #28
 8002662:	f7ff fed9 	bl	8002418 <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for CH1 of TIM11
			CLR_BIT(TIM11->SR, CH1);
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 800266c:	f023 0302 	bic.w	r3, r3, #2
 8002670:	6113      	str	r3, [r2, #16]
		}
		// Check if the update interrupt flag of TIM11 is set
		if (GET_BIT(TIM11->SR, 0)) {
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <TIM1_TRG_COM_TIM11_IRQHandler+0x68>

			// Check if a callback function is registered for TIM11 (at index 7 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[7] != STD_NULL) {
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d002      	beq.n	800268c <TIM1_TRG_COM_TIM11_IRQHandler+0x5c>

				// Call the callback function for TIM11
				GLOBAL_Ptr[7]();
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <TIM1_TRG_COM_TIM11_IRQHandler+0x74>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4798      	blx	r3
			}

			// Clear the update interrupt flag of TIM11
			CLR_BIT(TIM11->SR, 0);
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	4a03      	ldr	r2, [pc, #12]	; (80026a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x70>)
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	6113      	str	r3, [r2, #16]
		}
	}
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40010000 	.word	0x40010000
 80026a0:	40014800 	.word	0x40014800
 80026a4:	200000d0 	.word	0x200000d0

080026a8 <TIM1_BRK_TIM9_IRQHandler>:
/**
 * @brief   Interrupt handler for TIM1 break and TIM9 interrupts.
 *
 * @note    This function is called when either TIM1 triggers a break interrupt or TIM9 triggers an interrupt.
 */
void TIM1_BRK_TIM9_IRQHandler(void) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	// Check if the break interrupt flag of TIM1 is set
	if (GET_BIT(TIM1->SR, 7)) {
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <TIM1_BRK_TIM9_IRQHandler+0x8c>)
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	09db      	lsrs	r3, r3, #7
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d137      	bne.n	800272c <TIM1_BRK_TIM9_IRQHandler+0x84>
		// Add the necessary code or call a function for TIMER1 break handling
	}
	else {

		// Iterate through all channels of TIM9
		for (u8 ch = 1; ch <= 2; ch++) {
 80026bc:	2301      	movs	r3, #1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	e01e      	b.n	8002700 <TIM1_BRK_TIM9_IRQHandler+0x58>
			// Check if the capture/compare interrupt flag for the current channel is set
			if (GET_BIT(TIM9->SR, ch)) {
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 80026c4:	691a      	ldr	r2, [r3, #16]
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	fa22 f303 	lsr.w	r3, r2, r3
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d012      	beq.n	80026fa <TIM1_BRK_TIM9_IRQHandler+0x52>
				// Call the LOC_TIMER_ICU function for handling the interrupt
				// Multiplying by 4 is to get index in the array for the timer channel
				LOC_TIMER_ICU(4 * (TIMER9 - 1), ch - 1);
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	4619      	mov	r1, r3
 80026dc:	2014      	movs	r0, #20
 80026de:	f7ff fe9b 	bl	8002418 <LOC_TIMER_ICU>

				// Clear the capture/compare interrupt flag for the current channel
				CLR_BIT(TIM9->SR, ch);
 80026e2:	4b15      	ldr	r3, [pc, #84]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	79fa      	ldrb	r2, [r7, #7]
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	43d2      	mvns	r2, r2
 80026f0:	4611      	mov	r1, r2
 80026f2:	4a11      	ldr	r2, [pc, #68]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 80026f4:	400b      	ands	r3, r1
 80026f6:	6113      	str	r3, [r2, #16]

				// Exit the loop after handling the first set interrupt
				break;
 80026f8:	e005      	b.n	8002706 <TIM1_BRK_TIM9_IRQHandler+0x5e>
		for (u8 ch = 1; ch <= 2; ch++) {
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	3301      	adds	r3, #1
 80026fe:	71fb      	strb	r3, [r7, #7]
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d9dd      	bls.n	80026c2 <TIM1_BRK_TIM9_IRQHandler+0x1a>
			}
		}
		// Check if the update interrupt flag of TIM9 is set
		if (GET_BIT(TIM9->SR, 0)) {
 8002706:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00c      	beq.n	800272c <TIM1_BRK_TIM9_IRQHandler+0x84>

			// Check if a callback function is registered for TIM9 (at index 5 in GLOBAL_Ptr array)
			if (GLOBAL_Ptr[5] != STD_NULL) {
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <TIM1_BRK_TIM9_IRQHandler+0x78>

				// Call the callback function for TIM9
				GLOBAL_Ptr[5]();
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <TIM1_BRK_TIM9_IRQHandler+0x94>)
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	4798      	blx	r3
			}

			// Clear the update interrupt flag of TIM9
			CLR_BIT(TIM9->SR, 0);
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8002722:	691b      	ldr	r3, [r3, #16]
 8002724:	4a04      	ldr	r2, [pc, #16]	; (8002738 <TIM1_BRK_TIM9_IRQHandler+0x90>)
 8002726:	f023 0301 	bic.w	r3, r3, #1
 800272a:	6113      	str	r3, [r2, #16]
		}
	}
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40010000 	.word	0x40010000
 8002738:	40014000 	.word	0x40014000
 800273c:	200000d0 	.word	0x200000d0

08002740 <TIM1_CC_IRQHandler>:
 * @brief   Interrupt handler for TIM1 capture/compare interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4)
 * 				 of TIM1 triggers an interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
	// Iterate through channels 1 to 4 of Timer 1 (TIM1)
	for (u8 ch = 1; ch <= 4; ch++) {
 8002746:	2301      	movs	r3, #1
 8002748:	71fb      	strb	r3, [r7, #7]
 800274a:	e01e      	b.n	800278a <TIM1_CC_IRQHandler+0x4a>
		// Check if the capture/compare interrupt flag for the current channel is set
		if (GET_BIT(TIM1->SR, ch)) {
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <TIM1_CC_IRQHandler+0x58>)
 800274e:	691a      	ldr	r2, [r3, #16]
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	fa22 f303 	lsr.w	r3, r2, r3
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d012      	beq.n	8002784 <TIM1_CC_IRQHandler+0x44>
			// Call the LOC_TIMER_ICU function for handling the interrupt
			// Multiplying by 4 is to get index in the array for the timer channel
			LOC_TIMER_ICU(4 * (TIMER1 - 1), ch - 1);
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	3b01      	subs	r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	4619      	mov	r1, r3
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fe56 	bl	8002418 <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for the current channel
			CLR_BIT(TIM1->SR, ch);
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <TIM1_CC_IRQHandler+0x58>)
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	79fa      	ldrb	r2, [r7, #7]
 8002772:	2101      	movs	r1, #1
 8002774:	fa01 f202 	lsl.w	r2, r1, r2
 8002778:	43d2      	mvns	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4a06      	ldr	r2, [pc, #24]	; (8002798 <TIM1_CC_IRQHandler+0x58>)
 800277e:	400b      	ands	r3, r1
 8002780:	6113      	str	r3, [r2, #16]

			// Exit the loop after handling the first set interrupt
			break;
 8002782:	e005      	b.n	8002790 <TIM1_CC_IRQHandler+0x50>
	for (u8 ch = 1; ch <= 4; ch++) {
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	3301      	adds	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d9dd      	bls.n	800274c <TIM1_CC_IRQHandler+0xc>
		}
	}
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40010000 	.word	0x40010000

0800279c <TIM2_IRQHandler>:
 * @brief   Interrupt handler for TIM2 capture/compare and update interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 				the update interrupt of TIM2 triggers an interrupt.
 */
void TIM2_IRQHandler(void) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
	// Iterate through all channels of TIM2
	for (u8 ch = 1; ch <= 4; ch++) {
 80027a2:	2301      	movs	r3, #1
 80027a4:	71fb      	strb	r3, [r7, #7]
 80027a6:	e021      	b.n	80027ec <TIM2_IRQHandler+0x50>
		// Check if the capture/compare interrupt flag for the current channel is set
		if (GET_BIT(TIM2->SR, ch)) {
 80027a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d014      	beq.n	80027e6 <TIM2_IRQHandler+0x4a>
			// Call the LOC_TIMER_ICU function for handling the interrupt
			// Multiplying by 4 is to get index in the array for the timer channel
			LOC_TIMER_ICU( 4 * (TIMER2 - 1) , ch - 1);
 80027bc:	79fb      	ldrb	r3, [r7, #7]
 80027be:	3b01      	subs	r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	4619      	mov	r1, r3
 80027c4:	2004      	movs	r0, #4
 80027c6:	f7ff fe27 	bl	8002418 <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for the current channel
			CLR_BIT(TIM2->SR, ch);
 80027ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	79fa      	ldrb	r2, [r7, #7]
 80027d2:	2101      	movs	r1, #1
 80027d4:	fa01 f202 	lsl.w	r2, r1, r2
 80027d8:	43d2      	mvns	r2, r2
 80027da:	4611      	mov	r1, r2
 80027dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027e0:	400b      	ands	r3, r1
 80027e2:	6113      	str	r3, [r2, #16]

			// Exit the loop after handling the first set interrupt
			break;
 80027e4:	e005      	b.n	80027f2 <TIM2_IRQHandler+0x56>
	for (u8 ch = 1; ch <= 4; ch++) {
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	3301      	adds	r3, #1
 80027ea:	71fb      	strb	r3, [r7, #7]
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d9da      	bls.n	80027a8 <TIM2_IRQHandler+0xc>
		}
	}

	// Check if the update interrupt flag of TIM2 is set
	if (GET_BIT(TIM2->SR, 0)) {
 80027f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f003 0301 	and.w	r3, r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <TIM2_IRQHandler+0x82>
		// Check if a callback function is registered for TIM2 (at index 2 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[1] != STD_NULL) {
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <TIM2_IRQHandler+0x8c>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <TIM2_IRQHandler+0x72>

			// Call the callback function for TIM2
			GLOBAL_Ptr[1]();
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <TIM2_IRQHandler+0x8c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM2
		CLR_BIT(TIM2->SR, 0);
 800280e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6113      	str	r3, [r2, #16]
	}
}
 800281e:	bf00      	nop
 8002820:	3708      	adds	r7, #8
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200000d0 	.word	0x200000d0

0800282c <TIM3_IRQHandler>:
 * @brief   Interrupt handler for TIM3 capture/compare and update interrupts.
 *
 * @note    This function is called when any of the capture/compare channels (CH1-CH4) or
 * 			 the update interrupt of TIM3 triggers an interrupt.
 */
void TIM3_IRQHandler(void) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0

	// Iterate through all channels of TIM3
	for (u8 ch = 1; ch <= 4; ch++) {
 8002832:	2301      	movs	r3, #1
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e01e      	b.n	8002876 <TIM3_IRQHandler+0x4a>
		// Check if the capture/compare interrupt flag for the current channel is set
		if (GET_BIT(TIM3->SR, ch)) {
 8002838:	4b1c      	ldr	r3, [pc, #112]	; (80028ac <TIM3_IRQHandler+0x80>)
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	fa22 f303 	lsr.w	r3, r2, r3
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <TIM3_IRQHandler+0x44>
			// Call the LOC_TIMER_ICU function for handling the interrupt
			// Multiplying by 4 is to get index in the array for the timer channel
			LOC_TIMER_ICU(4 * (TIMER3 - 1), ch - 1);
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	3b01      	subs	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	2008      	movs	r0, #8
 8002854:	f7ff fde0 	bl	8002418 <LOC_TIMER_ICU>

			// Clear the capture/compare interrupt flag for the current channel
			CLR_BIT(TIM3->SR, ch);
 8002858:	4b14      	ldr	r3, [pc, #80]	; (80028ac <TIM3_IRQHandler+0x80>)
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	79fa      	ldrb	r2, [r7, #7]
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	43d2      	mvns	r2, r2
 8002866:	4611      	mov	r1, r2
 8002868:	4a10      	ldr	r2, [pc, #64]	; (80028ac <TIM3_IRQHandler+0x80>)
 800286a:	400b      	ands	r3, r1
 800286c:	6113      	str	r3, [r2, #16]

			// Exit the loop after handling the first set interrupt
			break;
 800286e:	e005      	b.n	800287c <TIM3_IRQHandler+0x50>
	for (u8 ch = 1; ch <= 4; ch++) {
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	3301      	adds	r3, #1
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d9dd      	bls.n	8002838 <TIM3_IRQHandler+0xc>
		}
	}

	// Check if the update interrupt flag of TIM3 is set
	if (GET_BIT(TIM3->SR, 0)) {
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <TIM3_IRQHandler+0x80>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <TIM3_IRQHandler+0x76>
		// Check if a callback function is registered for TIM3 (at index 3 in GLOBAL_Ptr array)
		if (GLOBAL_Ptr[2] != STD_NULL) {
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <TIM3_IRQHandler+0x84>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d002      	beq.n	8002896 <TIM3_IRQHandler+0x6a>

			// Call the callback function for TIM3
			GLOBAL_Ptr[2]();
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <TIM3_IRQHandler+0x84>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	4798      	blx	r3
		}

		// Clear the update interrupt flag of TIM3
		CLR_BIT(TIM3->SR, 0);
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <TIM3_IRQHandler+0x80>)
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <TIM3_IRQHandler+0x80>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6113      	str	r3, [r2, #16]
	}
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40000400 	.word	0x40000400
 80028b0:	200000d0 	.word	0x200000d0
 80028b4:	00000000 	.word	0x00000000

080028b8 <main>:

void System_Clock_Init();
void Interrupt_Init();
void HAL_Init();
int main(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	MFPU_Enable();
 80028bc:	f7fe fe4a 	bl	8001554 <MFPU_Enable>
	System_Clock_Init();
 80028c0:	f000 f83e 	bl	8002940 <System_Clock_Init>
	Interrupt_Init();
 80028c4:	f000 f872 	bl	80029ac <Interrupt_Init>
	HAL_Init();
 80028c8:	f000 f892 	bl	80029f0 <HAL_Init>
	//*************************test*******************************
	MGPIO_vSetPinMode(PORTC, PIN13, OUTPUT);
 80028cc:	2201      	movs	r2, #1
 80028ce:	210d      	movs	r1, #13
 80028d0:	2002      	movs	r0, #2
 80028d2:	f7fe fe4f 	bl	8001574 <MGPIO_vSetPinMode>
	MGPIO_vSetPinValue(PORTC, PIN13, LOW);
 80028d6:	2200      	movs	r2, #0
 80028d8:	210d      	movs	r1, #13
 80028da:	2002      	movs	r0, #2
 80028dc:	f7fe ff52 	bl	8001784 <MGPIO_vSetPinValue>
	//*************************run key******************************************
	MGPIO_vSetPinMode(PORTA, PIN0, INPUT);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2100      	movs	r1, #0
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7fe fe45 	bl	8001574 <MGPIO_vSetPinMode>
	MGPIO_vSetPinInPutType(PORTA, PIN0, PULLUP);
 80028ea:	2201      	movs	r2, #1
 80028ec:	2100      	movs	r1, #0
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fea6 	bl	8001640 <MGPIO_vSetPinInPutType>

	do{
	}while( MGPIO_u8GetPinValue(PORTA, PIN0) ) ;
 80028f4:	2100      	movs	r1, #0
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe ff08 	bl	800170c <MGPIO_u8GetPinValue>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f8      	bne.n	80028f4 <main+0x3c>

	set_pid_parameters(3, 1, 1.5, 50);
 8002902:	ed9f 3b07 	vldr	d3, [pc, #28]	; 8002920 <main+0x68>
 8002906:	ed9f 2b08 	vldr	d2, [pc, #32]	; 8002928 <main+0x70>
 800290a:	ed9f 1b09 	vldr	d1, [pc, #36]	; 8002930 <main+0x78>
 800290e:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8002938 <main+0x80>
 8002912:	f7fe fb1b 	bl	8000f4c <set_pid_parameters>

	while(1){
		Balance_Ball();
 8002916:	f7fe fb5f 	bl	8000fd8 <Balance_Ball>
 800291a:	e7fc      	b.n	8002916 <main+0x5e>
 800291c:	f3af 8000 	nop.w
 8002920:	00000000 	.word	0x00000000
 8002924:	40490000 	.word	0x40490000
 8002928:	00000000 	.word	0x00000000
 800292c:	3ff80000 	.word	0x3ff80000
 8002930:	00000000 	.word	0x00000000
 8002934:	3ff00000 	.word	0x3ff00000
 8002938:	00000000 	.word	0x00000000
 800293c:	40080000 	.word	0x40080000

08002940 <System_Clock_Init>:
	}
}


void System_Clock_Init(){
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	MRCC_vInit();
 8002944:	f7ff f8ea 	bl	8001b1c <MRCC_vInit>
	MRCC_vEnableClock(GPIOA_EN);
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff f90d 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(GPIOB_EN);
 800294e:	2001      	movs	r0, #1
 8002950:	f7ff f90a 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(GPIOC_EN);
 8002954:	2002      	movs	r0, #2
 8002956:	f7ff f907 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(SYSCFG_EN);
 800295a:	206e      	movs	r0, #110	; 0x6e
 800295c:	f7ff f904 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(USART1_EN);
 8002960:	2064      	movs	r0, #100	; 0x64
 8002962:	f7ff f901 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(USART2_EN);
 8002966:	2051      	movs	r0, #81	; 0x51
 8002968:	f7ff f8fe 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(USART6_EN);
 800296c:	2065      	movs	r0, #101	; 0x65
 800296e:	f7ff f8fb 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM1_EN);
 8002972:	2060      	movs	r0, #96	; 0x60
 8002974:	f7ff f8f8 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM2_EN);
 8002978:	2040      	movs	r0, #64	; 0x40
 800297a:	f7ff f8f5 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM3_EN);
 800297e:	2041      	movs	r0, #65	; 0x41
 8002980:	f7ff f8f2 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM4_EN);
 8002984:	2042      	movs	r0, #66	; 0x42
 8002986:	f7ff f8ef 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM5_EN);
 800298a:	2043      	movs	r0, #67	; 0x43
 800298c:	f7ff f8ec 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM9_EN);
 8002990:	2070      	movs	r0, #112	; 0x70
 8002992:	f7ff f8e9 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM10_EN);
 8002996:	2071      	movs	r0, #113	; 0x71
 8002998:	f7ff f8e6 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(TIM11_EN);
 800299c:	2072      	movs	r0, #114	; 0x72
 800299e:	f7ff f8e3 	bl	8001b68 <MRCC_vEnableClock>
	MRCC_vEnableClock(I2C1_EN);
 80029a2:	2055      	movs	r0, #85	; 0x55
 80029a4:	f7ff f8e0 	bl	8001b68 <MRCC_vEnableClock>
}
 80029a8:	bf00      	nop
 80029aa:	bd80      	pop	{r7, pc}

080029ac <Interrupt_Init>:
void Interrupt_Init(){
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
	MNVIC_vEnableInterrupt(NVIC_TIM1_CC);
 80029b0:	201b      	movs	r0, #27
 80029b2:	f7ff f87f 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM1_UP_TIM10);
 80029b6:	2019      	movs	r0, #25
 80029b8:	f7ff f87c 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM2);
 80029bc:	201c      	movs	r0, #28
 80029be:	f7ff f879 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM3);
 80029c2:	201d      	movs	r0, #29
 80029c4:	f7ff f876 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM4);
 80029c8:	201e      	movs	r0, #30
 80029ca:	f7ff f873 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM1_BRK_TIM9);
 80029ce:	2018      	movs	r0, #24
 80029d0:	f7ff f870 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vEnableInterrupt(NVIC_TIM5);
 80029d4:	2032      	movs	r0, #50	; 0x32
 80029d6:	f7ff f86d 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MNVIC_vInitGrouping(GP16SUB0);
 80029da:	2003      	movs	r0, #3
 80029dc:	f7ff f884 	bl	8001ae8 <MNVIC_vInitGrouping>
	//MNVIC_vSetIntPriority(NVIC_TIM1_UP_TIM10, GP15, SUB0);
	//MNVIC_vSetIntPriority(NVIC_TIM3, GP1, SUB0);
	//MNVIC_vSetIntPriority(NVIC_EXTI9_5, GP9, SUB0);
	MNVIC_vEnableInterrupt(NVIC_EXTI1);
 80029e0:	2007      	movs	r0, #7
 80029e2:	f7ff f867 	bl	8001ab4 <MNVIC_vEnableInterrupt>
	MEXTI_vEnableInterrupt(EXTI1);
 80029e6:	2001      	movs	r0, #1
 80029e8:	f7fe fbde 	bl	80011a8 <MEXTI_vEnableInterrupt>

}
 80029ec:	bf00      	nop
 80029ee:	bd80      	pop	{r7, pc}

080029f0 <HAL_Init>:

void HAL_Init(){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0

	HSERVO_vServoInit(SERVO1, TIMER3, CH1); //  TIMER3, CH1 -> Port A, Pin 6
 80029f4:	2201      	movs	r2, #1
 80029f6:	2103      	movs	r1, #3
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fafd 	bl	8000ff8 <HSERVO_vServoInit>
	HULTRA_vInitialize(ULTRA_SONIC1, TIMER1, CH1); // TIMER1, CH1 -> Port A, Pin 8
 80029fe:	2201      	movs	r2, #1
 8002a00:	2101      	movs	r1, #1
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7fe fb56 	bl	80010b4 <HULTRA_vInitialize>

}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a0c:	480d      	ldr	r0, [pc, #52]	; (8002a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002a10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a16:	490d      	ldr	r1, [pc, #52]	; (8002a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <LoopForever+0xe>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	; (8002a58 <LoopForever+0x16>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a3a:	f000 f811 	bl	8002a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a3e:	f7ff ff3b 	bl	80028b8 <main>

08002a42 <LoopForever>:

LoopForever:
    b LoopForever
 8002a42:	e7fe      	b.n	8002a42 <LoopForever>
  ldr   r0, =_estack
 8002a44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a4c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002a50:	08002ae8 	.word	0x08002ae8
  ldr r2, =_sbss
 8002a54:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002a58:	20000298 	.word	0x20000298

08002a5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC_IRQHandler>
	...

08002a60 <__libc_init_array>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4e0d      	ldr	r6, [pc, #52]	; (8002a98 <__libc_init_array+0x38>)
 8002a64:	4c0d      	ldr	r4, [pc, #52]	; (8002a9c <__libc_init_array+0x3c>)
 8002a66:	1ba4      	subs	r4, r4, r6
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	d109      	bne.n	8002a84 <__libc_init_array+0x24>
 8002a70:	4e0b      	ldr	r6, [pc, #44]	; (8002aa0 <__libc_init_array+0x40>)
 8002a72:	4c0c      	ldr	r4, [pc, #48]	; (8002aa4 <__libc_init_array+0x44>)
 8002a74:	f000 f818 	bl	8002aa8 <_init>
 8002a78:	1ba4      	subs	r4, r4, r6
 8002a7a:	10a4      	asrs	r4, r4, #2
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	42a5      	cmp	r5, r4
 8002a80:	d105      	bne.n	8002a8e <__libc_init_array+0x2e>
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a88:	4798      	blx	r3
 8002a8a:	3501      	adds	r5, #1
 8002a8c:	e7ee      	b.n	8002a6c <__libc_init_array+0xc>
 8002a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a92:	4798      	blx	r3
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7f2      	b.n	8002a7e <__libc_init_array+0x1e>
 8002a98:	08002ae0 	.word	0x08002ae0
 8002a9c:	08002ae0 	.word	0x08002ae0
 8002aa0:	08002ae0 	.word	0x08002ae0
 8002aa4:	08002ae4 	.word	0x08002ae4

08002aa8 <_init>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr

08002ab4 <_fini>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr
